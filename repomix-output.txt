This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-15T05:22:58.755Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
prisma/
  schema.prisma
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      books/
        [id]/
          route.ts
        route.ts
      user/
        route.ts
      webhook/
        clerk/
          route.ts
    auth/
      role-selection/
        page.tsx
    books/
      [id]/
        page.tsx
      page.tsx
    dashboard/
      owner/
        books/
          edit/
            [id]/
              page.tsx
          new/
            AddBook.tsx
            page.tsx
          MyBooksClient.tsx
          page.tsx
        DashboardClient.tsx
        page.tsx
      profile/
        page.tsx
      seeker/
        page.tsx
      page.tsx
    not-found/
      page.tsx
    sign-in/
      [[...sign-in]]/
        page.tsx
    sign-up/
      [[...sign-up]]/
        page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    books/
      BookCard.tsx
      BookDetail.tsx
      BookFilter.tsx
      BookForm.tsx
      BookList.tsx
      BookListSkeleton.tsx
    layout/
      DashboardLayout.tsx
      Footer.tsx
      Header.tsx
      Sidebar.tsx
    onboarding/
      RoleSelection.tsx
    ui/
      Avatar.tsx
      Badge.tsx
      Button.tsx
      Card.tsx
      Container.tsx
      dialog.tsx
      Input.tsx
      Modal.tsx
      NavButton.tsx
      NavLink.tsx
      Select.tsx
      skeleton.tsx
      Spinner.tsx
    BookFormWrapper.tsx
    EnhancedLoader.tsx
    LoadingProvider.tsx
    RoleSelectionWrapper.tsx
    RouteChangeListener.tsx
    SearchParamsComponent.tsx
  lib/
    prisma.ts
    redis.ts
    utils.ts
  types/
    index.ts
  middleware.ts
.eslintignore
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.js
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String   @unique
  name         String
  email        String   @unique
  mobileNumber String?
  role         String?  // "owner" or "seeker"
  location     String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  books        Book[]
}

model Book {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  author      String
  genre       String?
  description String?
  location    String
  contactInfo String
  status      String   // "available", "rented", "exchanged"
  condition   String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/books/[id]/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';

export async function GET(request: NextRequest, context: { params: any }) {
  // cast id to string (if it might be an array, take the first element)
  const { id } = context.params as { id: string };

  try {
    const book = await prisma.book.findUnique({
      where: { id },
      include: {
        owner: {
          select: { id: true, name: true, email: true, mobileNumber: true },
        },
      },
    });

    if (!book) {
      return NextResponse.json({ error: 'Book not found' }, { status: 404 });
    }

    return NextResponse.json(book);
  } catch (error) {
    console.error('Error fetching book:', error);
    return NextResponse.json({ error: 'Failed to fetch book' }, { status: 500 });
  }
}

export async function PUT(request: NextRequest, context: { params: any }) {
  const { id } = context.params as { id: string };

  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const data = await request.json();

    // Get the user by clerkId
    const user = await prisma.user.findUnique({
      where: { clerkId: userId },
    });
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Get the book
    const book = await prisma.book.findUnique({
      where: { id },
    });
    if (!book) {
      return NextResponse.json({ error: 'Book not found' }, { status: 404 });
    }

    // Check if user is the owner
    if (book.ownerId !== user.id) {
      return NextResponse.json({ error: 'You can only update your own books' }, { status: 403 });
    }

    // Update book
    const updatedBook = await prisma.book.update({
      where: { id },
      data,
      include: {
        owner: {
          select: { id: true, name: true, email: true, mobileNumber: true },
        },
      },
    });

    return NextResponse.json(updatedBook);
  } catch (error) {
    console.error('Error updating book:', error);
    return NextResponse.json({ error: 'Failed to update book' }, { status: 500 });
  }
}

export async function DELETE(request: NextRequest, context: { params: any }) {
  const { id } = context.params as { id: string };

  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get the user by clerkId
    const user = await prisma.user.findUnique({
      where: { clerkId: userId },
    });
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Get the book
    const book = await prisma.book.findUnique({
      where: { id },
    });
    if (!book) {
      return NextResponse.json({ error: 'Book not found' }, { status: 404 });
    }

    // Check if user is the owner
    if (book.ownerId !== user.id) {
      return NextResponse.json({ error: 'You can only delete your own books' }, { status: 403 });
    }

    // Delete book
    await prisma.book.delete({ where: { id } });
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting book:', error);
    return NextResponse.json({ error: 'Failed to delete book' }, { status: 500 });
  }
}

================
File: src/app/api/books/route.ts
================
// src/app/api/books/route.ts
import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { getCache, setCache } from '@/lib/redis';

// In-memory LRU cache as fallback (if Redis is not available)
const MEMORY_CACHE = new Map<string, { data: any; expiry: number }>();
const CACHE_SIZE_LIMIT = 50;
const CACHE_TTL = 60 * 1000; // 60 seconds

// Helper function to get from memory cache
function getFromMemoryCache(key: string) {
  const item = MEMORY_CACHE.get(key);
  if (!item) return null;
  
  if (Date.now() > item.expiry) {
    MEMORY_CACHE.delete(key);
    return null;
  }
  
  return item.data;
}

// Helper function to set to memory cache
function setToMemoryCache(key: string, data: any) {
  // Clean up cache if it's too large
  if (MEMORY_CACHE.size >= CACHE_SIZE_LIMIT) {
    const oldestKey = MEMORY_CACHE.keys().next().value;
    if (oldestKey !== undefined) {
      MEMORY_CACHE.delete(oldestKey);
    }
  }
  
  MEMORY_CACHE.set(key, { 
    data, 
    expiry: Date.now() + CACHE_TTL 
  });
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const isPreload = request.headers.get('x-preload') === 'true';
    
    // Pagination parameters
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '12');
    const skip = (page - 1) * limit;
    
    // Filter parameters
    const ownerId = searchParams.get('ownerId');
    const title = searchParams.get('title');
    const author = searchParams.get('author');
    const location = searchParams.get('location');
    const genre = searchParams.get('genre');
    const status = searchParams.get('status');
    
    // Generate cache key based on query parameters
    const cacheKey = `books:${page}:${limit}:${ownerId || ''}:${title || ''}:${author || ''}:${location || ''}:${genre || ''}:${status || ''}`;
    
    // Try to get from cache (Redis or memory)
    const cachedData = await getCache(cacheKey) || getFromMemoryCache(cacheKey);
    
    if (cachedData && !isPreload) {
      return NextResponse.json(cachedData);
    }
    
    // Build query conditions
    const where: any = {};
    
    if (ownerId) where.ownerId = ownerId;
    if (title) where.title = { contains: title, mode: 'insensitive' };
    if (author) where.author = { contains: author, mode: 'insensitive' };
    if (location) where.location = { contains: location, mode: 'insensitive' };
    if (genre) where.genre = { contains: genre, mode: 'insensitive' };
    if (status) where.status = status;
    
    // Use a transaction to perform both queries in a single database round trip
    const [totalCount, books] = await prisma.$transaction([
      prisma.book.count({ where }),
      prisma.book.findMany({
        where,
        include: {
          owner: {
            select: {
              id: true,
              name: true,
              // Only include essential fields
            },
          },
        },
        orderBy: {
          createdAt: 'desc',
        },
        skip,
        take: limit,
      })
    ]);
    
    const totalPages = Math.ceil(totalCount / limit);
    
    const responseData = {
      books,
      pagination: {
        page,
        limit,
        totalItems: totalCount,
        totalPages,
      }
    };
    
    // Cache the result
    await setCache(cacheKey, responseData, 60); // Cache for 60 seconds
    setToMemoryCache(cacheKey, responseData);
    
    // If this is a preload request, return a lightweight response
    if (isPreload) {
      return NextResponse.json({ success: true, cached: true });
    }
    
    return NextResponse.json(responseData);
  } catch (error) {
    console.error('Error fetching books:', error);
    return NextResponse.json(
      { error: 'Failed to fetch books' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const data = await request.json();
    
    // Get the user by clerkId
    const user = await prisma.user.findUnique({
      where: { clerkId: userId },
    });
    
    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }
    
    // Check if user is an owner
    if (user.role !== 'owner') {
      return NextResponse.json(
        { error: 'Only book owners can create listings' },
        { status: 403 }
      );
    }
    
    // Create new book
    const book = await prisma.book.create({
      data: {
        title: data.title,
        author: data.author,
        genre: data.genre,
        description: data.description,
        location: data.location,
        contactInfo: data.contactInfo,
        status: 'available',
        condition: data.condition,
        coverImage: data.coverImage,
        ownerId: user.id,
      },
      include: {
        owner: {
          select: {
            id: true,
            name: true,
            email: true,
            mobileNumber: true,
          },
        },
      },
    });
    
    return NextResponse.json(book, { status: 201 });
  } catch (error) {
    console.error('Error creating book:', error);
    return NextResponse.json(
      { error: 'Failed to create book listing' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/route.ts
================
// src/app/api/user/route.ts
import { NextResponse } from 'next/server';
import { auth, currentUser } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';

// Simple in-memory cache with reduced TTL
const userCache = new Map();
const CACHE_TTL = 30000; // 30 seconds in ms - reduced from 60 seconds

export async function GET(request: Request) {
  try {
    // Get auth info
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    // Check cache first
    const cachedUser = userCache.get(userId);
    if (cachedUser) {
      const { data, timestamp } = cachedUser;
      
      // Return cached data if still fresh
      if (Date.now() - timestamp < CACHE_TTL) {
        return NextResponse.json(data);
      }
      
      // Cache expired, delete it
      userCache.delete(userId);
    }
    
    // Get the user data from our DB
    const user = await prisma.user.findUnique({
      where: { clerkId: userId },
    });
    
    if (!user) {
      return NextResponse.json(
        { error: 'User not found in database' },
        { status: 404 }
      );
    }
    
    // Update cache
    userCache.set(userId, {
      data: user,
      timestamp: Date.now()
    });
    
    return NextResponse.json(user);
  } catch (error) {
    console.error('Error in GET /api/user:', error);
    return NextResponse.json(
      { error: 'Failed to fetch user', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    // Get auth info
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    // Clear cache for this user
    userCache.delete(userId);
    
    // Get the current user from Clerk
    const clerkUser = await currentUser();
    if (!clerkUser) {
      return NextResponse.json(
        { error: 'User not found in Clerk' },
        { status: 404 }
      );
    }
    
    // Parse the request body
    const data = await request.json();
    
    // Extract email with enhanced logging and error handling
    let primaryEmail = '';
    let emailDebugLog = [];
    
    try {
      // Check for primary email address
      if (clerkUser.primaryEmailAddressId) {
        emailDebugLog.push(`Primary email ID found: ${clerkUser.primaryEmailAddressId}`);
        
        // Verify emailAddresses array exists
        if (clerkUser.emailAddresses && Array.isArray(clerkUser.emailAddresses)) {
          const emailObj = clerkUser.emailAddresses.find(
            email => email.id === clerkUser.primaryEmailAddressId
          );
          
          if (emailObj) {
            emailDebugLog.push(`Found primary email object`);
            
            if (emailObj.emailAddress) {
              primaryEmail = emailObj.emailAddress;
              emailDebugLog.push(`Set primary email to: ${primaryEmail}`);
            } else {
              emailDebugLog.push(`Primary email object missing emailAddress property`);
            }
          } else {
            emailDebugLog.push(`Could not find email object matching primary ID`);
          }
        } else {
          emailDebugLog.push(`No valid emailAddresses array found`);
        }
      } else {
        emailDebugLog.push(`No primaryEmailAddressId found`);
      }
      
      // Try fallback to first email if primary not found
      if (!primaryEmail && clerkUser.emailAddresses && 
          Array.isArray(clerkUser.emailAddresses) && 
          clerkUser.emailAddresses.length > 0) {
        
        emailDebugLog.push(`Using fallback: first available email`);
        
        const firstEmail = clerkUser.emailAddresses[0];
        if (firstEmail && firstEmail.emailAddress) {
          primaryEmail = firstEmail.emailAddress;
          emailDebugLog.push(`Set email to first available: ${primaryEmail}`);
        } else {
          emailDebugLog.push(`First email object missing emailAddress property`);
        }
      }
    } catch (emailError: unknown) {
      emailDebugLog.push(`Error extracting email: ${emailError instanceof Error ? emailError.message : String(emailError)}`);
      console.error('Email extraction error:', emailError);
    }
    
    // Log email extraction process
    console.log('User API - Email extraction log:', emailDebugLog.join(' → '));
    
    // If no email found, check for existing user email
    if (!primaryEmail) {
      console.log(`Warning: Could not extract email from Clerk user ${userId}`);
      
      // Try to get existing email from database
      const existingUser = await prisma.user.findUnique({
        where: { clerkId: userId },
        select: { email: true }
      });
      
      if (existingUser && existingUser.email) {
        primaryEmail = existingUser.email;
        console.log(`Using existing email from database: ${primaryEmail}`);
      } else {
        return NextResponse.json(
          { error: 'Unable to determine user email address' },
          { status: 400 }
        );
      }
    }
    
    // Check if user exists in database
    const userExists = await prisma.user.findUnique({
      where: { clerkId: userId },
    });
    
    let user;
    
    if (userExists) {
      // Update existing user
      user = await prisma.user.update({
        where: { clerkId: userId },
        data: {
          role: data.role,
          mobileNumber: data.mobileNumber || userExists.mobileNumber,
          location: data.location || userExists.location,
          bio: data.bio || userExists.bio,
          email: primaryEmail, // Ensure email is up to date
          name: clerkUser.firstName && clerkUser.lastName 
            ? `${clerkUser.firstName} ${clerkUser.lastName}` 
            : (clerkUser.firstName || clerkUser.username || userExists.name),
        },
      });
    } else {
      // User doesn't exist in our database yet - create them with Clerk data
      try {
        user = await prisma.user.create({
          data: {
            clerkId: userId,
            name: clerkUser.firstName && clerkUser.lastName 
              ? `${clerkUser.firstName} ${clerkUser.lastName}` 
              : (clerkUser.firstName || clerkUser.username || 'New User'),
            email: primaryEmail,
            role: data.role,
            mobileNumber: data.mobileNumber || '',
            location: data.location || '',
            bio: data.bio || '',
          },
        });
      } catch (createError) {
        console.error('Error creating user:', createError);
        return NextResponse.json(
          { error: 'Failed to create user record', details: createError instanceof Error ? createError.message : String(createError) },
          { status: 500 }
        );
      }
    }
    
    // Update cache with new data
    userCache.set(userId, {
      data: user,
      timestamp: Date.now()
    });
    
    return NextResponse.json(user);
  } catch (error) {
    console.error('Error in PUT /api/user:', error);
    return NextResponse.json(
      { error: 'Failed to update user', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}

================
File: src/app/api/webhook/clerk/route.ts
================
// src/app/api/webhook/clerk/route.ts
import { WebhookEvent } from '@clerk/nextjs/server';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function POST(req: Request) {
  const headersList = await headers();
  const svix_id = headersList.get('svix-id');
  const svix_timestamp = headersList.get('svix-timestamp');
  const svix_signature = headersList.get('svix-signature');

  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new NextResponse('Missing svix headers', { status: 400 });
  }

  // Get the webhook body
  const payload = await req.json();
  const { type, data } = payload as WebhookEvent;

  console.log(`Webhook received: ${type}`);

  try {
    if (type === 'user.created' || type === 'user.updated') {
      const { id, email_addresses, first_name, last_name, primary_email_address_id } = data;
      
      if (!id) {
        return NextResponse.json({ success: false, error: 'No user ID provided' }, { status: 400 });
      }
      
      // Enhanced email extraction process with detailed logging
      let primaryEmail = '';
      let emailDebugLog = [];
      
      try {
        // First verify email_addresses array exists and is valid
        if (email_addresses && Array.isArray(email_addresses) && email_addresses.length > 0) {
          emailDebugLog.push(`Found ${email_addresses.length} email addresses`);
          
          // Try to find primary email if primary_email_address_id exists
          if (primary_email_address_id) {
            emailDebugLog.push(`Primary email ID found: ${primary_email_address_id}`);
            
            // Safely extract the primary email
            const primaryEmailObj = email_addresses.find(email => email.id === primary_email_address_id);
            
            if (primaryEmailObj) {
              emailDebugLog.push(`Found matching email object for primary ID`);
              
              if (primaryEmailObj.email_address) {
                primaryEmail = primaryEmailObj.email_address;
                emailDebugLog.push(`Successfully extracted primary email: ${primaryEmail}`);
              } else {
                emailDebugLog.push(`Warning: Primary email object lacks email_address property`);
              }
            } else {
              emailDebugLog.push(`Warning: Could not find email object matching primary ID`);
            }
          } else {
            emailDebugLog.push(`No primary_email_address_id found`);
          }
          
          // If primary email not found, use first available email as fallback
          if (!primaryEmail && email_addresses[0]) {
            emailDebugLog.push(`Using fallback: first available email`);
            
            if (email_addresses[0].email_address) {
              primaryEmail = email_addresses[0].email_address;
              emailDebugLog.push(`Set email to first available: ${primaryEmail}`);
            } else {
              emailDebugLog.push(`Warning: First email object lacks email_address property`);
            }
          }
        } else {
          emailDebugLog.push(`Warning: No valid email_addresses array found`);
        }
      } catch (emailError) {
        emailDebugLog.push(`Error extracting email: ${emailError instanceof Error ? emailError.message : String(emailError)}`);
        console.error('Email extraction error:', emailError);
      }
      
      // Log the email extraction process for debugging
      console.log('Email extraction log:', emailDebugLog.join(' → '));
      
      // If no email was found, use placeholder with user ID
      if (!primaryEmail) {
        console.log(`Warning: No email address found for user ${id}. Using placeholder.`);
        primaryEmail = `user_${id}@placeholder.com`;
      }
      
      // Prepare user name with fallbacks
      const firstName = first_name || '';
      const lastName = last_name || '';
      const name = `${firstName} ${lastName}`.trim() || 'User';
      
      console.log(`Syncing user: ${id}, ${name}, ${primaryEmail}`);

      // Create or update user with thorough error handling
      try {
        await prisma.user.upsert({
          where: { clerkId: id as string },
          update: {
            name,
            email: primaryEmail,
          },
          create: {
            clerkId: id as string,
            name,
            email: primaryEmail,
            mobileNumber: '',
            role: null, // Role will be set during onboarding
          },
        });

        console.log(`User ${id} synced successfully`);
      } catch (dbError) {
        console.error('Database error during user upsert:', dbError);
        return NextResponse.json({ 
          success: false, 
          error: 'Database error during user sync',
          details: dbError instanceof Error ? dbError.message : String(dbError)
        }, { status: 500 });
      }
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error processing webhook:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to process webhook',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

================
File: src/app/auth/role-selection/page.tsx
================
import { Suspense } from 'react';
import { redirect } from 'next/navigation';
import { currentUser } from '@clerk/nextjs/server';
import Container from '@/components/ui/Container';
import prisma from '@/lib/prisma';
import RoleSelectionWrapper from '@/components/RoleSelectionWrapper';

export default async function RoleSelectionPage() {
  const user = await currentUser();
  if (!user) {
    redirect('/sign-in');
  }

  const dbUser = await prisma.user.findUnique({
    where: { clerkId: user.id },
  });

  if (dbUser?.role) {
    redirect(dbUser.role === 'owner' ? '/dashboard/owner' : '/dashboard/seeker');
  }

  return (
    <Container size="sm" className="py-12">
      <Suspense fallback={<div>Loading role selection...</div>}>
        <RoleSelectionWrapper />
      </Suspense>
    </Container>
  );
}

================
File: src/app/books/[id]/page.tsx
================
// src/app/books/[id]/page.tsx
import { notFound } from 'next/navigation';
import { auth, currentUser } from '@clerk/nextjs/server';
import Image from 'next/image';
import NavLink from '@/components/ui/NavLink';
import Container from '@/components/ui/Container';
import Button from '@/components/ui/Button';
import Avatar from '@/components/ui/Avatar';
import Badge from '@/components/ui/Badge';
import { BookOpen, MapPin, Calendar, ArrowLeft, MessageCircle, Share2 } from 'lucide-react';
import prisma from '@/lib/prisma';
import { formatDate } from '@/lib/utils';
import { Params } from 'next/dist/server/request/params';

type BookPageProps = {
  params: {
    id: string;
  };
  searchParams?: Record<string, string | string[]>;
};

export default async function BookPage(props: any) {
  const { id } = props.params;
  const { userId } = await auth();
  const user = await currentUser();

  // Fetch book details
  const book = await prisma.book.findUnique({
    where: { id },
    include: {
      owner: {
        select: {
          id: true,
          name: true,
          email: true,
          mobileNumber: true,
          clerkId: true,
          bio: true,
          location: true,
        },
      },
    },
  });

  if (!book) {
    notFound();
  }

  // Check if current user is the owner
  const isOwner = Boolean(userId && book.owner.clerkId === userId);

  // Fetch related books (same genre or same author)
  const relatedBooks = await prisma.book.findMany({
    where: {
      id: { not: id },
      status: 'available',
      OR: [{ genre: book.genre }, { author: book.author }],
    },
    include: {
      owner: {
        select: {
          id: true,
          name: true,
          email: true,
          mobileNumber: true,
        },
      },
    },
    take: 4,
  });

  // Generate placeholder image URL based on book title
  const imageUrl =
    book.coverImage ||
    `/api/placeholder/400/600?text=${encodeURIComponent(book.title)}`;

  return (
    <div className="bg-gray-50 min-h-screen py-12">
      <Container>
        <div className="mb-8">
          <NavLink
            href="/books"
            className="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to all books
          </NavLink>
        </div>

        <div className="bg-white shadow-xl rounded-2xl overflow-hidden">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 p-6 md:p-8">
            <div className="md:col-span-1">
              <div className="aspect-[2/3] relative rounded-lg overflow-hidden shadow-lg border border-gray-200">
                <Image
                  src={imageUrl}
                  alt={book.title}
                  fill
                  className="object-cover"
                  priority
                />
              </div>

              <div className="mt-6 space-y-4">
                <Button variant="primary" fullWidth className="py-3 rounded-xl">
                  <MessageCircle className="mr-2 h-4 w-4" />
                  Contact Owner
                </Button>
                <Button variant="outline" fullWidth className="py-3 rounded-xl">
                  <Share2 className="mr-2 h-4 w-4" />
                  Share Book
                </Button>
              </div>
            </div>

            <div className="md:col-span-2">
              <div className="flex justify-between items-start">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 tracking-tight">
                    {book.title}
                  </h1>
                  <p className="text-xl text-gray-700 mt-1">by {book.author}</p>
                </div>
                <Badge
                  status={book.status as 'available' | 'rented' | 'exchanged'}
                  className="text-sm"
                />
              </div>

              <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                {book.genre && (
                  <div className="flex items-center">
                    <BookOpen className="h-5 w-5 text-blue-600 mr-2" />
                    <span className="text-gray-700">
                      Genre: <span className="font-medium">{book.genre}</span>
                    </span>
                  </div>
                )}
                {book.condition && (
                  <div className="flex items-center">
                    <span className="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-600/20">
                      Condition:{' '}
                      {book.condition.charAt(0).toUpperCase() + book.condition.slice(1)}
                    </span>
                  </div>
                )}
                <div className="flex items-center">
                  <MapPin className="h-5 w-5 text-blue-600 mr-2" />
                  <span className="text-gray-700">{book.location}</span>
                </div>
                <div className="flex items-center">
                  <Calendar className="h-5 w-5 text-blue-600 mr-2" />
                  <span className="text-gray-700">
                    Listed on {formatDate(book.createdAt)}
                  </span>
                </div>
              </div>

              {book.description && (
                <div className="mt-8">
                  <h2 className="text-xl font-semibold text-gray-900 mb-3">Description</h2>
                  <div className="prose prose-blue max-w-none text-gray-600">
                    <p>{book.description}</p>
                  </div>
                </div>
              )}

              <div className="mt-10 pt-10 border-t border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">About the Owner</h2>
                <div className="flex items-start">
                  <Avatar name={book.owner.name} size="lg" className="mr-4" />
                  <div>
                    <h3 className="font-medium text-lg text-gray-900">{book.owner.name}</h3>
                    {book.owner.location && (
                      <p className="text-gray-600 text-sm flex items-center mt-1">
                        <MapPin className="h-4 w-4 mr-1" />
                        {book.owner.location}
                      </p>
                    )}
                    {book.owner.bio && (
                      <p className="mt-2 text-sm text-gray-600 line-clamp-2">
                        {book.owner.bio}
                      </p>
                    )}
                    <div className="mt-3">
                      <span className="inline-flex items-center rounded-full bg-gray-50 px-2 py-1 text-xs font-medium text-gray-700">
                        Contact: {book.contactInfo}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {isOwner && (
                <div className="mt-8 bg-blue-50 rounded-xl p-4">
                  <h3 className="font-medium text-blue-800">
                    You are the owner of this book
                  </h3>
                  <div className="mt-3 flex space-x-3">
                    <NavLink href={`/dashboard/owner/books/edit/${book.id}`}>
                      <Button size="sm">Edit Book</Button>
                    </NavLink>
                    <Button variant="outline" size="sm">
                      Change Status
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {relatedBooks.length > 0 && (
          <div className="mt-16">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">
              You might also like
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {relatedBooks.map((relatedBook) => (
                <NavLink
                  key={relatedBook.id}
                  href={`/books/${relatedBook.id}`}
                  className="group"
                >
                  <div className="bg-white rounded-xl overflow-hidden shadow-md transition transform hover:-translate-y-1 hover:shadow-lg">
                    <div className="aspect-[2/3] relative">
                      <Image
                        src={
                          relatedBook.coverImage ||
                          `/api/placeholder/300/450?text=${encodeURIComponent(
                            relatedBook.title
                          )}`
                        }
                        alt={relatedBook.title}
                        fill
                        className="object-cover"
                      />
                    </div>
                    <div className="p-4">
                      <h3 className="font-medium text-gray-900 group-hover:text-blue-600 transition">
                        {relatedBook.title}
                      </h3>
                      <p className="text-sm text-gray-600">{relatedBook.author}</p>
                    </div>
                  </div>
                </NavLink>
              ))}
            </div>
          </div>
        )}
      </Container>
    </div>
  );
}

================
File: src/app/books/page.tsx
================
// src/app/books/page.tsx
import Container from '@/components/ui/Container';
import BookList from '@/components/books/BookList';
import BookListSkeleton from '@/components/books/BookListSkeleton';
import { Suspense } from 'react';
import prisma from '@/lib/prisma';
import { Search, BookOpen, Filter } from 'lucide-react';
import { BookWithOwner } from '@/types';
import Spinner from '@/components/ui/Spinner';

export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';

// Preload essential data
async function getInitialBooks() {
  const books = await prisma.book.findMany({
    where: {
      status: 'available',
    },
    include: {
      owner: {
        select: {
          id: true,
          name: true,
          email: true,
          mobileNumber: true,
        },
      },
    },
    orderBy: {
      createdAt: 'desc',
    },
    take: 12, // Load only first page
  });
  
  return books;
}

async function getGenres() {
  const genres = await prisma.book.findMany({
    where: { 
      genre: { not: null },
      status: 'available' 
    },
    select: { genre: true },
    distinct: ['genre']
  });

  const uniqueGenres = genres
    .map(item => item.genre)
    .filter(Boolean)
    .sort() as string[];
    
  return uniqueGenres;
}

export default async function BooksPage() {
  // Parallel data fetching
  const [initialBooks, uniqueGenres] = await Promise.all([
    getInitialBooks(),
    getGenres()
  ]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      <div className="relative pb-16 pt-16 sm:pb-20 sm:pt-20">
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute left-[calc(50%-500px)] top-0 -z-10 w-[1000px] h-[1000px] transform-gpu opacity-20 blur-3xl">
            <div 
              className="aspect-square h-full w-full rounded-full bg-gradient-to-tr from-blue-700 via-blue-300 to-purple-500" 
              style={{
                clipPath: 'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)'
              }}
            />
          </div>
        </div>

        <Container>
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl md:text-5xl">
              <span className="block">Discover Books in</span>
              <span className="block text-blue-600">Your Community</span>
            </h1>
            <p className="mx-auto mt-4 max-w-2xl text-lg leading-8 text-gray-600">
              Browse through our collection of books available for rent or exchange from people around you.
            </p>
            <div className="mt-8 flex items-center justify-center gap-x-4">
              <div className="relative max-w-xl w-full">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <Search className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="search"
                  className="block w-full p-3 pl-10 text-sm rounded-full border-0 bg-white/80 backdrop-blur-sm text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-base"
                  placeholder="Search for titles, authors, or genres..."
                />
              </div>
            </div>
          </div>
        </Container>
      </div>

      <Container>
        <div className="mb-12">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b border-gray-200 pb-4">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Available Books</h2>
              <p className="mt-1 text-sm text-gray-500">Find books available for rent or exchange</p>
            </div>
            
            <div className="mt-4 sm:mt-0 flex space-x-2">
              <button className="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
                <Filter className="h-4 w-4 mr-2" />
                Filters
              </button>
              <div className="relative inline-block text-left">
                <select className="rounded-md border-0 py-2 pl-3 pr-10 text-sm font-medium text-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-600 hover:bg-gray-50">
                  <option>Sort: Newest</option>
                  <option>Sort: Oldest</option>
                  <option>Sort: A-Z</option>
                  <option>Sort: Z-A</option>
                </select>
              </div>
            </div>
          </div>

          <div className="mt-6 mb-8 flex flex-wrap gap-2">
            <span className="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10">
              All
            </span>
            {uniqueGenres.map((genre) => (
              <span key={genre} className="inline-flex items-center rounded-full bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 hover:bg-gray-100 cursor-pointer">
                {genre}
              </span>
            ))}
          </div>

          <Suspense fallback={<BookListSkeleton />}>
            <BookList initialBooks={initialBooks as BookWithOwner[]} showFilters={false} />
          </Suspense>
        </div>
      </Container>
    </div>
  );
}

================
File: src/app/dashboard/owner/books/edit/[id]/page.tsx
================
import { redirect, notFound } from 'next/navigation';
import { currentUser } from '@clerk/nextjs/server';
import DashboardLayout from '@/components/layout/DashboardLayout';
import BookForm from '@/components/books/BookForm';
import Card from '@/components/ui/Card';
import prisma from '@/lib/prisma';
import { BookFormData } from '@/types';


export default async function EditBookPage(props: any) {
  const { id } = props.params;
  const user = await currentUser();
  
  if (!user) {
    redirect('/sign-in');
  }
  
  // Get user from database
  const dbUser = await prisma.user.findUnique({
    where: { clerkId: user.id },
  });
  
  // If user is not an owner, redirect
  if (!dbUser || dbUser.role !== 'owner') {
    redirect('/dashboard');
  }
  
  // Fetch book details
  const book = await prisma.book.findUnique({
    where: { id },
  });
  
  if (!book) {
    notFound();
  }
  
  // Check if current user is the owner of the book
  if (book.ownerId !== dbUser.id) {
    redirect('/dashboard/owner/books');
  }
  
  // Extract required form data
  const formData: BookFormData = {
    title: book.title,
    author: book.author,
    genre: book.genre || '',
    description: book.description || '',
    location: book.location,
    contactInfo: book.contactInfo,
    condition: book.condition as any || 'good',
  };
  
  return (
    <DashboardLayout>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">
          Edit Book
        </h1>
        <p className="mt-1 text-gray-600">
          Update the details of your book listing.
        </p>
      </div>
      
      <Card>
        <Card.Content>
          <BookForm 
            initialData={formData} 
            isEditing 
            bookId={id} 
          />
        </Card.Content>
      </Card>
    </DashboardLayout>
  );
}

================
File: src/app/dashboard/owner/books/new/AddBook.tsx
================
'use client';

import { useState, useRef, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  BookOpen, 
  ChevronLeft, 
  Upload, 
  Check, 
  X, 
  Sparkles, 
  MapPin, 
  Phone, 
  Mail,
  ArrowRight
} from 'lucide-react';
import toast from 'react-hot-toast';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import Select from '@/components/ui/Select';
import { BookFormData } from '@/types';
import NavLink from '@/components/ui/NavLink';

export const bookConditions = [
  { value: 'new', label: 'New' },
  { value: 'like-new', label: 'Like New' },
  { value: 'good', label: 'Good' },
  { value: 'fair', label: 'Fair' },
  { value: 'poor', label: 'Poor' }
];

// Sample book covers - using public images
const sampleCovers = [
  'https://images.unsplash.com/photo-1544947950-fa07a98d237f?auto=format&fit=crop&w=300&q=80',
  'https://images.unsplash.com/photo-1512820790803-83ca734da794?auto=format&fit=crop&w=300&q=80',
  'https://images.unsplash.com/photo-1629992101753-56d196c8aabb?auto=format&fit=crop&w=300&q=80',
  'https://images.unsplash.com/photo-1621351183012-e2f9972dd9bf?auto=format&fit=crop&w=300&q=80'
];

interface PremiumBookFormProps {
  genres: string[];
  user: any;
}

// Inner component that may use useSearchParams or other client hooks
function PremiumBookFormContent({ genres, user }: PremiumBookFormProps) {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [selectedCover, setSelectedCover] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const [formData, setFormData] = useState<BookFormData>({
    title: '',
    author: '',
    genre: '',
    description: '',
    location: user.location || '',
    contactInfo: user.email || '',
    condition: 'good',
  });
  
  // Validation state
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [touched, setTouched] = useState<Record<string, boolean>>({});
  
  // Effect to update progress bar
  useEffect(() => {
    let newProgress = 0;
    
    if (step === 1) {
      // Calculate based on title, author, genre
      const fields = ['title', 'author', 'genre'];
      const filled = fields.filter(field => formData[field as keyof BookFormData]?.trim()).length;
      newProgress = Math.round((filled / fields.length) * 100);
    } else if (step === 2) {
      // Calculate based on description and condition
      const descriptionWeight = formData.description ? 50 : 0;
      const conditionWeight = formData.condition ? 50 : 0;
      newProgress = descriptionWeight + conditionWeight;
    } else if (step === 3) {
      // Calculate based on location and contactInfo
      const fields = ['location', 'contactInfo'];
      const filled = fields.filter(field => formData[field as keyof BookFormData]?.trim()).length;
      newProgress = Math.round((filled / fields.length) * 100);
    }
    
    setProgress(newProgress);
  }, [formData, step]);
  
  // Function to read file as data URL
  const readFileAsDataURL = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };
  
  const handleCoverSelection = (cover: string) => {
    setSelectedCover(cover);
  };
  
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Mark field as touched
    setTouched(prev => ({ ...prev, [name]: true }));
    
    // Clear error if value is not empty
    if (value.trim() && errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };
  
  const handleFileInput = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      try {
        // Validate file type
        if (!file.type.startsWith('image/')) {
          toast.error('Please upload an image file');
          return;
        }
        
        // Validate file size (limit to 5MB)
        if (file.size > 5 * 1024 * 1024) {
          toast.error('Image size must be less than 5MB');
          return;
        }
        
        // Convert file to data URL
        const dataUrl = await readFileAsDataURL(file);
        setSelectedCover(dataUrl);
        toast.success('Cover image uploaded successfully!');
      } catch (error) {
        console.error('Error reading file:', error);
        toast.error('Failed to upload image. Please try again.');
      }
    }
  };
  
  const validateStep = (currentStep: number) => {
    const newErrors: Record<string, string> = {};
    
    if (currentStep === 1) {
      if (!formData.title.trim()) newErrors.title = 'Title is required';
      if (!formData.author.trim()) newErrors.author = 'Author is required';
      // Genre is optional
    } else if (currentStep === 2) {
      // Description is optional
      // Condition is pre-selected
    } else if (currentStep === 3) {
      if (!formData.location.trim()) newErrors.location = 'Location is required';
      if (!formData.contactInfo.trim()) newErrors.contactInfo = 'Contact information is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const nextStep = () => {
    if (validateStep(step)) {
      setStep(prev => prev + 1);
      window.scrollTo(0, 0);
    }
  };
  
  const prevStep = () => {
    setStep(prev => prev - 1);
    window.scrollTo(0, 0);
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateStep(3)) return;
    
    try {
      setLoading(true);
      
      // Show global loading if available
      if (typeof window !== 'undefined') {
        const loadingEvent = new CustomEvent('routeChangeStart');
        window.dispatchEvent(loadingEvent);
      }
      
      // Add cover image if selected
      const dataToSubmit = {
        ...formData,
        coverImage: selectedCover || undefined,
      };
      
      const response = await fetch('/api/books', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSubmit),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to add book');
      }
      
      const book = await response.json();
      
      // Success animation
      toast.success('Book added successfully!');
      
      // Redirect after a short delay to show the success state
      setTimeout(() => {
        router.push(`/books/${book.id}`);
        router.refresh();
      }, 1000);
      
    } catch (error) {
      console.error('Error adding book:', error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Failed to add book. Please try again.'
      );
    } finally {
      setLoading(false);
      
      // Hide global loading if available
      if (typeof window !== 'undefined') {
        const completeEvent = new CustomEvent('routeChangeComplete');
        window.dispatchEvent(completeEvent);
      }
    }
  };
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.1,
        delayChildren: 0.1
      }
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.5, ease: [0.22, 1, 0.36, 1] }
    }
  };
  
  const fadeInVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { duration: 0.5 }
    }
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6">
        {/* Header with back button */}
        <div className="mb-8 flex items-center justify-between">
          <NavLink 
            href="/dashboard/owner/books"
            className="flex items-center text-gray-600 hover:text-gray-900 transition"
          >
            <ChevronLeft className="mr-1 h-5 w-5" />
            <span>Back to My Books</span>
          </NavLink>
          
          {/* Progress indicator */}
          <div className="flex items-center space-x-4">
            <div className="hidden sm:block">
              <div className="text-sm font-medium text-gray-500">
                Step {step} of 3: {step === 1 ? 'Basic Info' : step === 2 ? 'Details' : 'Location & Contact'}
              </div>
            </div>
            <div className="w-32 h-2 bg-gray-200 rounded-full overflow-hidden">
              <motion.div 
                className="h-full bg-blue-600 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${progress}%` }}
                transition={{ duration: 0.5 }}
              />
            </div>
          </div>
        </div>
        
        {/* Form Card with animation */}
        <motion.div 
          className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100"
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, ease: [0.22, 1, 0.36, 1] }}
        >
          <div className="px-6 py-8 sm:p-10">
            <h1 className="text-3xl font-bold text-gray-900 flex items-center">
              <BookOpen className="mr-3 h-8 w-8 text-blue-600" />
              {step === 1 ? 'Add New Book' : step === 2 ? 'Book Details' : 'Finishing Up'}
            </h1>
            
            <p className="mt-2 text-gray-600 max-w-2xl">
              {step === 1 
                ? 'Share your books with others in your community. Start by filling in the basic information about your book.'
                : step === 2 
                ? 'Add more details to help others understand what you\'re offering.'
                : 'Almost done! Add your location and contact details so interested readers can reach you.'}
            </p>
            
            <div className="mt-8">
              <form onSubmit={handleSubmit}>
                <AnimatePresence mode="wait">
                  {step === 1 && (
                    <motion.div
                      key="step1"
                      variants={containerVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      className="space-y-6"
                    >
                      <motion.div variants={itemVariants}>
                        <Input
                          label="Book Title"
                          id="title"
                          name="title"
                          value={formData.title}
                          onChange={handleChange}
                          error={errors.title}
                          placeholder="Enter book title"
                          className="text-lg"
                          required
                        />
                      </motion.div>
                      
                      <motion.div variants={itemVariants}>
                        <Input
                          label="Author"
                          id="author"
                          name="author"
                          value={formData.author}
                          onChange={handleChange}
                          error={errors.author}
                          placeholder="Enter author name"
                          required
                        />
                      </motion.div>
                      
                      <motion.div variants={itemVariants}>
                        <Select
                          label="Genre (Optional)"
                          id="genre"
                          name="genre"
                          value={formData.genre}
                          onChange={handleChange}
                          options={[
                            { value: '', label: 'Select a genre' },
                            ...genres.map(genre => ({ value: genre, label: genre }))
                          ]}
                        />
                      </motion.div>
                      
                      <motion.div 
                        variants={itemVariants}
                        className="pt-4 flex justify-end"
                      >
                        <Button 
                          type="button" 
                          onClick={nextStep}
                          className="px-8 py-2.5 rounded-full"
                        >
                          Next Step
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                      </motion.div>
                    </motion.div>
                  )}
                  
                  {step === 2 && (
                    <motion.div
                      key="step2"
                      variants={containerVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      className="space-y-6"
                    >
                      <motion.div variants={itemVariants}>
                        <div className="space-y-1">
                          <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                            Description (Optional)
                          </label>
                          <textarea
                            id="description"
                            name="description"
                            rows={5}
                            value={formData.description}
                            onChange={handleChange}
                            className="block w-full rounded-lg border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                            placeholder="Describe your book, its condition, and any specific details readers should know..."
                          />
                        </div>
                      </motion.div>
                      
                      <motion.div variants={itemVariants}>
                        <Select
                          label="Condition"
                          id="condition"
                          name="condition"
                          value={formData.condition}
                          onChange={handleChange}
                          options={bookConditions}
                        />
                      </motion.div>
                      
                      <motion.div variants={itemVariants} className="mt-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Book Cover (Optional)
                        </label>
                        
                        <div className="grid grid-cols-2 sm:grid-cols-5 gap-4">
                          {/* Upload option */}
                          <div 
                            className={`relative aspect-[2/3] border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-blue-500 transition ${selectedCover ? 'border-gray-300' : 'border-blue-400'}`}
                            onClick={() => fileInputRef.current?.click()}
                          >
                            {selectedCover && selectedCover.startsWith('data:') ? (
                              <div className="relative w-full h-full">
                                <Image 
                                  src={selectedCover} 
                                  alt="Custom book cover" 
                                  fill 
                                  className="object-cover rounded-lg"
                                  unoptimized
                                />
                                <div className="absolute inset-0 bg-black/30 opacity-0 hover:opacity-100 transition-opacity flex items-center justify-center">
                                  <p className="text-white text-xs">Change cover</p>
                                </div>
                                <div className="absolute top-2 right-2 bg-blue-500 rounded-full p-1">
                                  <Check className="h-3 w-3 text-white" />
                                </div>
                              </div>
                            ) : (
                              <>
                                <Upload className="h-6 w-6 text-gray-400" />
                                <span className="mt-2 text-xs text-center text-gray-500">Upload cover</span>
                              </>
                            )}
                            <input
                              type="file"
                              ref={fileInputRef}
                              onChange={handleFileInput}
                              accept="image/*"
                              className="hidden"
                            />
                          </div>
                          
                          {/* Sample covers */}
                          {sampleCovers.map((cover, index) => (
                            <div 
                              key={index}
                              className={`relative aspect-[2/3] rounded-lg overflow-hidden cursor-pointer border-2 transition ${selectedCover === cover ? 'border-blue-500 shadow-md' : 'border-transparent'}`}
                              onClick={() => handleCoverSelection(cover)}
                            >
                              <Image
                                src={cover}
                                alt="Book cover example"
                                fill
                                className="object-cover"
                                unoptimized
                              />
                              {selectedCover === cover && (
                                <div className="absolute top-2 right-2 bg-blue-500 rounded-full p-1">
                                  <Check className="h-3 w-3 text-white" />
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </motion.div>
                      
                      <motion.div 
                        variants={itemVariants}
                        className="pt-6 flex justify-between"
                      >
                        <Button 
                          type="button" 
                          variant="outline" 
                          onClick={prevStep}
                        >
                          Back
                        </Button>
                        <Button 
                          type="button" 
                          onClick={nextStep}
                          className="px-8 py-2.5 rounded-full"
                        >
                          Next Step
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                      </motion.div>
                    </motion.div>
                  )}
                  
                  {step === 3 && (
                    <motion.div
                      key="step3"
                      variants={containerVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      className="space-y-6"
                    >
                      <motion.div variants={itemVariants} className="mb-8">
                        <div className="flex flex-col sm:flex-row gap-6">
                          {/* Book preview */}
                          <div className="sm:w-1/3">
                            <div className="mb-3">
                              <span className="text-sm font-medium text-gray-500">Book Preview</span>
                            </div>
                            <div className="bg-gray-50 rounded-lg p-4 h-full">
                              <div className="flex items-center">
                                <div className="relative h-24 w-16 overflow-hidden rounded bg-gray-200 flex-shrink-0">
                                  {selectedCover ? (
                                    <Image 
                                      src={selectedCover} 
                                      alt="Book cover" 
                                      fill 
                                      className="object-cover" 
                                      unoptimized
                                    />
                                  ) : (
                                    <div className="flex h-full items-center justify-center">
                                      <BookOpen className="h-6 w-6 text-gray-400" />
                                    </div>
                                  )}
                                </div>
                                <div className="ml-4 flex-1 min-w-0">
                                  <h3 className="font-medium text-gray-900 truncate">{formData.title || 'Book Title'}</h3>
                                  <p className="text-sm text-gray-600">{formData.author || 'Author'}</p>
                                  {formData.genre && (
                                    <span className="inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 mt-1">
                                      {formData.genre}
                                    </span>
                                  )}
                                </div>
                              </div>
                              
                              {formData.description && (
                                <div className="mt-3 text-xs text-gray-600 line-clamp-3">
                                  {formData.description}
                                </div>
                              )}
                              
                              <div className="mt-3 text-xs text-gray-500">
                                Condition: {formData.condition ? formData.condition.charAt(0).toUpperCase() + formData.condition.slice(1) : 'Good'}
                              </div>
                            </div>
                          </div>
                          
                          {/* Location & Contact */}
                          <div className="sm:w-2/3">
                            <motion.div variants={itemVariants}>
                              <Input
                                label="Location"
                                id="location"
                                name="location"
                                value={formData.location}
                                onChange={handleChange}
                                error={errors.location}
                                placeholder="City, State or Region"
                                required
                                icon={MapPin}
                              />
                            </motion.div>
                            
                            <motion.div variants={itemVariants} className="mt-6">
                              <Input
                                label="Contact Information"
                                id="contactInfo"
                                name="contactInfo"
                                value={formData.contactInfo}
                                onChange={handleChange}
                                error={errors.contactInfo}
                                placeholder="Email address or phone number"
                                required
                                icon={formData.contactInfo?.includes('@') ? Mail : Phone}
                              />
                              <p className="mt-1 text-xs text-gray-500">
                                This will be visible to other users so they can contact you about this book.
                              </p>
                            </motion.div>
                          </div>
                        </div>
                      </motion.div>
                      
                      <motion.div variants={fadeInVariants} className="bg-blue-50 rounded-lg p-4 border border-blue-100">
                        <div className="flex">
                          <div className="flex-shrink-0">
                            <Sparkles className="h-5 w-5 text-blue-500" />
                          </div>
                          <div className="ml-3">
                            <h3 className="text-sm font-medium text-blue-800">Ready to share your book!</h3>
                            <div className="mt-1 text-sm text-blue-700">
                              You're about to add this book to your collection. Once listed, interested readers will be able to contact you.
                            </div>
                          </div>
                        </div>
                      </motion.div>
                      
                      <motion.div 
                        variants={itemVariants}
                        className="pt-6 flex justify-between"
                      >
                        <Button 
                          type="button" 
                          variant="outline" 
                          onClick={prevStep}
                        >
                          Back
                        </Button>
                        <Button 
                          type="submit" 
                          loading={loading}
                          className="px-8 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 rounded-full"
                        >
                          <Sparkles className="mr-2 h-4 w-4" />
                          Add Book
                        </Button>
                      </motion.div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </form>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}

// Main export component with Suspense boundary
export default function PremiumBookForm({ genres, user }: PremiumBookFormProps) {
  return (
    <Suspense fallback={<div className="flex items-center justify-center p-12">
      <div className="text-center">
        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent"></div>
        <p className="mt-4 text-gray-600">Loading book form...</p>
      </div>
    </div>}>
      <PremiumBookFormContent genres={genres} user={user} />
    </Suspense>
  );
}

================
File: src/app/dashboard/owner/books/new/page.tsx
================
// src/app/dashboard/owner/books/new/page.tsx
import { redirect } from 'next/navigation';
import { currentUser } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import BookFormWrapper from '@/components/BookFormWrapper'; // Adjust the path accordingly

export default async function NewBookPage() {
  const user = await currentUser();
  if (!user) {
    redirect('/sign-in');
  }

  // Get user from database
  const dbUser = await prisma.user.findUnique({
    where: { clerkId: user.id },
  });

  // If user is not an owner, redirect
  if (!dbUser || dbUser.role !== 'owner') {
    redirect('/dashboard');
  }

  // Get genres for dropdown
  const genres = [
    'Fiction', 'Non-Fiction', 'Science Fiction', 'Fantasy', 
    'Mystery', 'Thriller', 'Romance', 'Biography', 
    'History', 'Self-Help', 'Business', 'Science',
    'Technology', 'Art', 'Poetry', 'Travel',
    'Cooking', 'Children', 'Young Adult', 'Comics',
    'Religion', 'Philosophy'
  ];

  return <BookFormWrapper genres={genres} user={dbUser} />;
}

================
File: src/app/dashboard/owner/books/MyBooksClient.tsx
================
// src/app/dashboard/owner/books/MyBooksClient.tsx
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  PlusCircle, 
  BookOpen, 
  Filter, 
  ChevronDown, 
  ArrowUpRight,
  Sparkles,
  BookMarked
} from 'lucide-react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import Button from '@/components/ui/Button';
import BookList from '@/components/books/BookList';
import { BookWithOwner } from '@/types';
import { useUser } from '@clerk/nextjs';
import NavLink from '@/components/ui/NavLink';

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: { type: 'spring', stiffness: 100 }
  }
};

const statsVariants = {
  hidden: { scale: 0.9, opacity: 0 },
  visible: {
    scale: 1,
    opacity: 1,
    transition: { type: 'spring', stiffness: 100 }
  }
};

export default function MyBooksClient({ initialBooks }: { initialBooks: BookWithOwner[] }) {
  const { user } = useUser();
  const [showFilters, setShowFilters] = useState(false);
  const [books, setBooks] = useState(initialBooks || []);
  const [stats, setStats] = useState({
    total: 0,
    available: 0,
    rented: 0,
    exchanged: 0
  });
  
  // Calculate stats from books
  useEffect(() => {
    if (books.length) {
      const total = books.length;
      const available = books.filter(book => book.status === 'available').length;
      const rented = books.filter(book => book.status === 'rented').length;
      const exchanged = books.filter(book => book.status === 'exchanged').length;
      
      setStats({ total, available, rented, exchanged });
    }
  }, [books]);
  
return (
    <DashboardLayout>
      <div className="relative mb-10">
        {/* Background gradient */}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl -z-10"></div>
        
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="relative px-6 py-8 rounded-xl"
        >
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-6">
            <div>
              <div className="mb-2 inline-flex items-center rounded-full px-3 py-1 bg-blue-100 text-blue-600 text-xs font-medium">
                <BookMarked className="mr-1 h-3 w-3" />
                <span>My Library</span>
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                My Books Collection
              </h1>
              <p className="text-gray-600 max-w-xl">
                Manage your book listings, track their status, and connect with readers in your community.
              </p>
            </div>
            <div className="flex space-x-3">
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <NavLink href="/dashboard/owner/books/new">
                  <Button 
                    className="px-5 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-md"
                  >
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Add New Book
                  </Button>
                </NavLink>
              </motion.div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowFilters(!showFilters)}
                className="inline-flex items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50"
              >
                <Filter className="mr-2 h-4 w-4" />
                Filters
                <ChevronDown className={`ml-1 h-4 w-4 transition-transform ${showFilters ? 'rotate-180' : ''}`} />
              </motion.button>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Stats Section */}
      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
        className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"
      >
        <motion.div variants={statsVariants} className="bg-white rounded-xl shadow-md p-5 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Total Books</p>
              <h3 className="text-2xl font-bold mt-1">{stats.total}</h3>
            </div>
            <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
              <BookOpen className="h-5 w-5 text-blue-600" />
            </div>
          </div>
        </motion.div>
        
        <motion.div variants={statsVariants} className="bg-white rounded-xl shadow-md p-5 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Available</p>
              <h3 className="text-2xl font-bold mt-1 text-green-600">{stats.available}</h3>
            </div>
            <div className="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center">
              <Sparkles className="h-5 w-5 text-green-600" />
            </div>
          </div>
        </motion.div>
        
        <motion.div variants={statsVariants} className="bg-white rounded-xl shadow-md p-5 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Rented</p>
              <h3 className="text-2xl font-bold mt-1 text-blue-600">{stats.rented}</h3>
            </div>
            <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
              <ArrowUpRight className="h-5 w-5 text-blue-600" />
            </div>
          </div>
        </motion.div>
        
        <motion.div variants={statsVariants} className="bg-white rounded-xl shadow-md p-5 border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-500 font-medium">Exchanged</p>
              <h3 className="text-2xl font-bold mt-1 text-purple-600">{stats.exchanged}</h3>
            </div>
            <div className="w-10 h-10 rounded-full bg-purple-100 flex items-center justify-center">
              <svg className="h-5 w-5 text-purple-600" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M17 3L21 7L17 11" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M21 7H7C5.89543 7 5 7.89543 5 9V11" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M7 21L3 17L7 13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M3 17H17C18.1046 17 19 16.1046 19 15V13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </div>
          </div>
        </motion.div>
      </motion.div>

      {/* Filter Animation */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden mb-6"
          >
            <div className="bg-white p-6 rounded-xl shadow-md border border-gray-200">
              <h3 className="text-lg font-medium mb-4">Filter Your Books</h3>
              <div className="grid gap-4 md:grid-cols-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All Statuses</option>
                    <option value="available">Available</option>
                    <option value="rented">Rented</option>
                    <option value="exchanged">Exchanged</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Genre
                  </label>
                  <input 
                    type="text" 
                    placeholder="Fiction, Non-fiction, etc." 
                    className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Added Date
                  </label>
                  <select className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All Time</option>
                    <option value="7d">Last 7 Days</option>
                    <option value="30d">Last 30 Days</option>
                    <option value="90d">Last 90 Days</option>
                  </select>
                </div>
              </div>
              <div className="mt-4 flex justify-end">
                <Button variant="outline" className="mr-2">Reset</Button>
                <Button>Apply Filters</Button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
      >
        <motion.div variants={itemVariants}>
          <BookList
            initialBooks={books}
            showOwnerActions
            showFilters={false}
          />
        </motion.div>
      </motion.div>
    </DashboardLayout>
  );
}

================
File: src/app/dashboard/owner/books/page.tsx
================
// src/app/dashboard/owner/books/page.tsx
// This is a server component (no 'use client' directive)
import { redirect } from 'next/navigation';
import { currentUser } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import MyBooksClient from './MyBooksClient';

export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';

export default async function MyBooksPage() {
  const user = await currentUser();
  
  if (!user) {
    redirect('/sign-in');
  }
  
  // Get user from database
  const dbUser = await prisma.user.findUnique({
    where: { clerkId: user.id },
  });
  
  // If user is not an owner, redirect
  if (!dbUser || dbUser.role !== 'owner') {
    redirect('/dashboard');
  }
  
  // Fetch user's books
  const books = await prisma.book.findMany({
    where: { ownerId: dbUser.id },
    include: {
      owner: {
        select: {
          id: true,
          name: true,
          email: true,
          mobileNumber: true,
        },
      },
    },
    orderBy: { createdAt: 'desc' },
  });
  
  return <MyBooksClient initialBooks={books} />;
}

================
File: src/app/dashboard/owner/DashboardClient.tsx
================
'use client';

import { useState, useEffect, memo } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { 
  PlusCircle, 
  BookOpen,
  Calendar,
  TrendingUp,
  ArrowUpRight,
  Eye,
  BarChart3,
  ChevronRight,
  Search
} from 'lucide-react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import Button from '@/components/ui/Button';
import NavButton from '@/components/ui/NavButton';
import NavLink from '@/components/ui/NavLink';
import Card from '@/components/ui/Card';
import { timeAgo } from '@/lib/utils';

// Helper function to get chart data colors based on status
const getStatusColor = (status: any) => {
  switch(status) {
    case 'available': return {
      badge: 'bg-green-100 text-green-800 border border-green-200',
      icon: 'text-green-500',
      bg: 'bg-green-50'
    };
    case 'rented': return {
      badge: 'bg-blue-100 text-blue-800 border border-blue-200',
      icon: 'text-blue-500',
      bg: 'bg-blue-50'
    };
    case 'exchanged': return {
      badge: 'bg-purple-100 text-purple-800 border border-purple-200',
      icon: 'text-purple-500',
      bg: 'bg-purple-50'
    };
    default: return {
      badge: 'bg-gray-100 text-gray-800 border border-gray-200',
      icon: 'text-gray-500',
      bg: 'bg-gray-50'
    };
  }
};

// Define types for our props with minimal required properties
interface OwnerDashboardClientProps {
  user: {
    firstName: string;
    name: string;
    imageUrl?: string;
  };
  stats: {
    totalBooks: number;
    availableBooks: number;
    rentedBooks: number;
    exchangedBooks: number;
  };
  recentBooks: any[];
}

// Memo the stat card for better performance
const StatCard = memo(({ title, value, icon: Icon, color, percentage }: any) => (
  <Card className={`bg-white overflow-hidden border-t-4 ${color}`}>
    <Card.Content className="p-5">
      <div className="flex justify-between items-start">
        <div>
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <h3 className="mt-1 text-3xl font-bold text-gray-900">{value}</h3>
        </div>
        <div className="bg-opacity-20 p-3 rounded-lg" style={{ backgroundColor: color }}>
          <Icon className={`h-6 w-6 ${color}`} />
        </div>
      </div>
      
      {percentage !== undefined && (
        <div className="mt-4">
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div className="rounded-full h-2" style={{ width: `${percentage}%`, backgroundColor: color }}></div>
          </div>
          <p className="mt-1 text-xs text-gray-500">{percentage}% of your collection</p>
        </div>
      )}
    </Card.Content>
  </Card>
));

// Memo the book table row for better performance
const BookTableRow = memo(({ book, index }: { book: any, index: number }) => {
  const statusColors = getStatusColor(book.status);
  const [imageLoaded, setImageLoaded] = useState(false);
  
  return (
    <tr key={book.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="flex items-center">
          <div className="relative h-10 w-8 flex-shrink-0 overflow-hidden rounded bg-gray-100 mr-3">
            {!imageLoaded && <div className="absolute inset-0 bg-gray-200 animate-pulse"></div>}
            {book.coverImage ? (
              <img
                src={book.coverImage}
                alt={book.title}
                className={`h-full w-full object-cover ${imageLoaded ? 'opacity-100' : 'opacity-0'}`}
                onLoad={() => setImageLoaded(true)}
                loading="lazy"
              />
            ) : (
              <div className="flex h-full items-center justify-center">
                <BookOpen className="h-4 w-4 text-gray-400" />
              </div>
            )}
          </div>
          <div>
            <h3 className="font-medium text-gray-900">{book.title}</h3>
            <p className="text-xs text-gray-600">{book.author}</p>
          </div>
        </div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${statusColors.badge}`}>
          {book.status.charAt(0).toUpperCase() + book.status.slice(1)}
        </span>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        {timeAgo(book.createdAt)}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        {book.genre || "—"}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
        <div className="flex justify-end gap-2">
          <NavLink href={`/dashboard/owner/books/edit/${book.id}`}>
            <Button variant="outline" size="sm" className="text-gray-600 px-2 py-1">
              Edit
            </Button>
          </NavLink>
          <NavLink href={`/books/${book.id}`}>
            <Button size="sm" className="text-white px-2 py-1">
              View
            </Button>
          </NavLink>
        </div>
      </td>
    </tr>
  );
});

export default function OwnerDashboardClient({
  user,
  stats,
  recentBooks
}: OwnerDashboardClientProps) {
  const [greeting, setGreeting] = useState('');
  const firstName = user.firstName || user.name.split(' ')[0];
  
  useEffect(() => {
    const hour = new Date().getHours();
    if (hour < 12) setGreeting('Good morning');
    else if (hour < 18) setGreeting('Good afternoon');
    else setGreeting('Good evening');
  }, []);

  // Calculate the percentage of books by status for the visual representation
  const totalBooks = stats.totalBooks > 0 ? stats.totalBooks : 1; // Prevent division by zero
  const availablePercentage = Math.round((stats.availableBooks / totalBooks) * 100);
  const rentedPercentage = Math.round((stats.rentedBooks / totalBooks) * 100);
  const exchangedPercentage = Math.round((stats.exchangedBooks / totalBooks) * 100);

  return (
    <DashboardLayout>
      {/* Welcome Header Section */}
      <div className="mb-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 shadow-sm border border-blue-100">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              {greeting}, {firstName}!
            </h1>
            <p className="mt-2 text-gray-600 max-w-xl">
              Welcome to your BookShare dashboard. Manage your books, track their status, and connect with other book lovers.
            </p>
          </div>
          <div className="mt-6 md:mt-0 flex space-x-3">
            <NavLink href="/books">
              <Button variant="outline" className="flex items-center gap-2 bg-white">
                <Search size={16} />
                Browse Books
              </Button>
            </NavLink>
            <NavLink href="/dashboard/owner/books/new">
              <Button className="flex items-center gap-2">
                <PlusCircle size={16} />
                Add New Book
              </Button>
            </NavLink>
          </div>
        </div>
      </div>
      
      {/* Stats Overview with visual elements */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <BarChart3 className="mr-2 text-blue-600" size={20} />
          Book Statistics
        </h2>
        <div className="grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-4">
          <StatCard 
            title="Total Books" 
            value={stats.totalBooks} 
            icon={BookOpen} 
            color="border-t-blue-500" 
            percentage={100} 
          />
          <StatCard 
            title="Available" 
            value={stats.availableBooks} 
            icon={Eye} 
            color="border-t-green-500" 
            percentage={availablePercentage} 
          />
          <StatCard 
            title="Rented" 
            value={stats.rentedBooks} 
            icon={ArrowUpRight} 
            color="border-t-blue-500" 
            percentage={rentedPercentage} 
          />
          <StatCard 
            title="Exchanged" 
            value={stats.exchangedBooks} 
            icon={TrendingUp} 
            color="border-t-purple-500" 
            percentage={exchangedPercentage} 
          />
        </div>
      </div>
      
      {/* Books Section */}
      <div className="mb-8">
        <div className="mb-6 flex items-center justify-between">
          <h2 className="text-xl font-semibold text-gray-900 flex items-center">
            <BookOpen className="mr-2 text-blue-600" size={20} />
            Your Books Library
          </h2>
          <div className="flex gap-3">
            <NavLink href="/dashboard/owner/books/new">
              <Button size="sm" className="flex items-center gap-2">
                <PlusCircle size={16} />
                Add Book
              </Button>
            </NavLink>
            <NavLink href="/dashboard/owner/books">
              <Button variant="outline" size="sm" className="flex items-center gap-1 group">
                View All <ChevronRight size={16} className="transition-transform group-hover:translate-x-1" />
              </Button>
            </NavLink>
          </div>
        </div>
        
        {recentBooks.length === 0 ? (
          <Card className="bg-white p-8 text-center">
            <div className="rounded-full bg-blue-50 p-4 w-16 h-16 mx-auto flex items-center justify-center">
              <BookOpen className="h-8 w-8 text-blue-500" />
            </div>
            <h3 className="mt-4 text-xl font-semibold text-gray-900">
              Your library is empty
            </h3>
            <p className="mt-2 text-gray-600 max-w-md mx-auto">
              Add your first book to start sharing with others in your community. It only takes a minute!
            </p>
            <div className="mt-6">
              <NavLink href="/dashboard/owner/books/new">
                <Button className="px-8 py-2.5">
                  <PlusCircle className="mr-2 h-5 w-5" />
                  Add Your First Book
                </Button>
              </NavLink>
            </div>
          </Card>
        ) : (
          <div className="overflow-hidden rounded-xl border border-gray-200 bg-white shadow">
            <div className="overflow-x-auto">
              <table className="w-full table-auto">
                <thead>
                  <tr className="bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <th className="px-6 py-4">Book</th>
                    <th className="px-6 py-4">Status</th>
                    <th className="px-6 py-4">Added</th>
                    <th className="px-6 py-4">Genre</th>
                    <th className="px-6 py-4 text-right">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 bg-white">
                  {recentBooks.map((book, index) => (
                    <BookTableRow key={book.id} book={book} index={index} />
                  ))}
                </tbody>
              </table>
            </div>
            
            {stats.totalBooks > recentBooks.length && (
              <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 text-center">
                <NavLink href="/dashboard/owner/books">
                  <Button variant="outline">
                    View All {stats.totalBooks} Books
                  </Button>
                </NavLink>
              </div>
            )}
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}

================
File: src/app/dashboard/owner/page.tsx
================
// src/app/dashboard/owner/page.tsx
import { redirect } from 'next/navigation';
import { currentUser } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import OwnerDashboardClient from './DashboardClient';
import { Suspense } from 'react';
import Spinner from '@/components/ui/Spinner';

export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';

async function getUserData(clerkId: string) {
  return await prisma.user.findUnique({
    where: { clerkId },
    select: {
      id: true,
      name: true,
      role: true,
    },
  });
}

async function getBookStatsAndRecent(userId: string) {
  // Optimized to use a single groupBy query instead of multiple count queries
  const [bookStats, recentBooks] = await Promise.all([
    prisma.book.groupBy({
      by: ['status'],
      where: { 
        ownerId: userId 
      },
      _count: {
        _all: true
      }
    }),
    prisma.book.findMany({
      where: { ownerId: userId },
      select: {
        id: true,
        title: true,
        author: true,
        genre: true,
        status: true,
        coverImage: true,
        createdAt: true,
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
    })
  ]);
  
  // Process the results to get the counts by status
  const stats = {
    totalBooks: 0,
    availableBooks: 0,
    rentedBooks: 0,
    exchangedBooks: 0
  };
  
  // Sum up the counts from the aggregation
  bookStats.forEach(stat => {
    const count = stat._count._all;
    stats.totalBooks += count;
    
    if (stat.status === 'available') {
      stats.availableBooks = count;
    } else if (stat.status === 'rented') {
      stats.rentedBooks = count;
    } else if (stat.status === 'exchanged') {
      stats.exchangedBooks = count;
    }
  });
  
  return { stats, recentBooks };
}

export default async function OwnerDashboardPage() {
  const user = await currentUser();
  
  if (!user) {
    redirect('/sign-in');
  }
  
  try {
    // Get user data
    const dbUser = await getUserData(user.id);
    
    // If user is not an owner, redirect
    if (!dbUser || dbUser.role !== 'owner') {
      redirect('/dashboard');
    }
    
    // Get stats and recent books in a single operation
    const { stats, recentBooks } = await getBookStatsAndRecent(dbUser.id);

    return (
      <Suspense fallback={<div className="flex justify-center py-20"><Spinner size="lg" /></div>}>
        <OwnerDashboardClient
          user={{
            firstName: user.firstName || '',
            name: dbUser.name
          }}
          stats={stats}
          recentBooks={recentBooks}
        />
      </Suspense>
    );
  } catch (error) {
    console.error("Error loading dashboard:", error);
    // Show a more user-friendly error page
    return (
      <div className="flex flex-col items-center justify-center min-h-[50vh] p-4">
        <h2 className="text-2xl font-semibold text-gray-800 mb-3">Something went wrong</h2>
        <p className="text-gray-600 mb-6 text-center max-w-md">
          We're having trouble loading your dashboard. Please try again in a moment.
        </p>
        <button 
          onClick={() => window.location.reload()} 
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Refresh page
        </button>
      </div>
    );
  }
}

================
File: src/app/dashboard/profile/page.tsx
================
// app/dashboard/profile/page.js
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import { Phone, MapPin, User as UserIcon } from 'lucide-react';
import toast from 'react-hot-toast';
import DashboardLayout from '@/components/layout/DashboardLayout';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import Avatar from '@/components/ui/Avatar';

// Force dynamic rendering to avoid static generation issues with client hooks
export const dynamic = 'force-dynamic';

interface PublicMetadata {
  role?: string;
}

function ProfileContent() {
  const { user, isLoaded } = useUser();
  const router = useRouter();
  const [formData, setFormData] = useState({
    mobileNumber: '',
    location: '',
    bio: '',
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isLoaded && user) {
      fetchUserData();
    }
  }, [isLoaded, user]);

  const fetchUserData = async () => {
    try {
      const response = await fetch('/api/user');
      if (!response.ok) {
        throw new Error('Failed to fetch user data');
      }
      const userData = await response.json();
      setFormData({
        mobileNumber: userData.mobileNumber || '',
        location: userData.location || '',
        bio: userData.bio || '',
      });
    } catch (error) {
      console.error('Error fetching user data:', error);
      toast.error('Failed to load profile data');
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setLoading(true);
      const response = await fetch('/api/user', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });
      if (!response.ok) {
        throw new Error('Failed to update profile');
      }
      toast.success('Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to update profile');
    } finally {
      setLoading(false);
    }
  };

  if (!isLoaded) {
    return (
      <div className="flex justify-center py-12">
        <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!user) {
    router.push('/sign-in');
    return null;
  }

  return (
    <div className="mb-6">
      <h1 className="text-2xl font-bold text-gray-900">Profile</h1>
      <p className="mt-1 text-gray-600">Manage your personal information and settings.</p>

      <div className="grid gap-6 md:grid-cols-3">
        <div className="md:col-span-1">
          <Card>
            <Card.Content className="flex flex-col items-center py-6">
              <Avatar
                name={user.fullName || user.username || ''}
                src={user.imageUrl}
                size="lg"
                className="h-24 w-24"
              />
              <h2 className="mt-4 text-xl font-semibold text-gray-900">
                {user.fullName || user.username}
              </h2>
              <p className="text-gray-600">{user.primaryEmailAddress?.emailAddress}</p>
              <div className="mt-6 w-full space-y-2">
                {formData.mobileNumber && (
                  <div className="flex items-center text-sm text-gray-600">
                    <Phone className="mr-2 h-4 w-4" />
                    {formData.mobileNumber}
                  </div>
                )}
                {formData.location && (
                  <div className="flex items-center text-sm text-gray-600">
                    <MapPin className="mr-2 h-4 w-4" />
                    {formData.location}
                  </div>
                )}
                <div className="flex items-center text-sm text-gray-600">
                  <UserIcon className="mr-2 h-4 w-4" />
                  {(user.unsafeMetadata as PublicMetadata).role || 'No role set'}
                </div>
              </div>
              <div className="mt-6">
                <Button variant="outline" onClick={() => user.update({})}>
                  Edit Profile in Clerk
                </Button>
              </div>
            </Card.Content>
          </Card>
        </div>

        <div className="md:col-span-2">
          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Profile Information</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <Input
                  label="Mobile Number"
                  id="mobileNumber"
                  name="mobileNumber"
                  value={formData.mobileNumber}
                  onChange={handleChange}
                  placeholder="Your mobile number"
                />
                <Input
                  label="Location"
                  id="location"
                  name="location"
                  value={formData.location}
                  onChange={handleChange}
                  placeholder="City, State"
                />
                <div>
                  <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
                    Bio
                  </label>
                  <textarea
                    id="bio"
                    name="bio"
                    rows={3}
                    value={formData.bio}
                    onChange={handleChange}
                    className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    placeholder="A short bio about yourself"
                  />
                </div>
                <div className="flex justify-end">
                  <Button type="submit" loading={loading}>
                    Save Changes
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>
        </div>
      </div>
    </div>
  );
}

export default function ProfilePage() {
  return (
    <Suspense fallback={<div className="flex justify-center py-12">Loading dashboard...</div>}>
      <DashboardLayout>
        <ProfileContent />
      </DashboardLayout>
    </Suspense>
  );
}

================
File: src/app/dashboard/seeker/page.tsx
================
import { redirect } from 'next/navigation';
import Link from 'next/link';
import { currentUser } from '@clerk/nextjs/server';
import { Search, BookOpen } from 'lucide-react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import Button from '@/components/ui/Button';
import Card from '@/components/ui/Card';
import BookList from '@/components/books/BookList';
import prisma from '@/lib/prisma';
import { BookWithOwner } from '@/types';
import NavLink from '@/components/ui/NavLink';

export const dynamic = 'force-dynamic';

export default async function SeekerDashboardPage() {
  const user = await currentUser();
  
  if (!user) {
    redirect('/sign-in');
  }
  
  // Get user from database
  const dbUser = await prisma.user.findUnique({
    where: { clerkId: user.id },
  });
  
  // If user is not a seeker, redirect
  if (!dbUser || dbUser.role !== 'seeker') {
    redirect('/dashboard');
  }
  
  // Fetch recent available books
  const recentBooks = await prisma.book.findMany({
    where: { status: 'available' },
    include: {
      owner: {
        select: {
          id: true,
          name: true,
          email: true,
          mobileNumber: true,
        },
      },
    },
    orderBy: { createdAt: 'desc' },
    take: 3,
  });
  
  return (
    <DashboardLayout>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">
          Seeker Dashboard
        </h1>
        <p className="mt-1 text-gray-600">
          Find books to rent or exchange from other users.
        </p>
      </div>
      
      <Card className="bg-white p-6 mb-8">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">
              Looking for books?
            </h2>
            <p className="mt-1 text-gray-600">
              Browse available books in your community.
            </p>
          </div>
          <div className="mt-4 sm:mt-0">
            <NavLink href="/books">
              <Button>
              <Search className="mr-2 h-4 w-4" />
              Browse All Books</Button>
            </NavLink>
          </div>
        </div>
      </Card>
      
      <div className="mt-8">
        <h2 className="mb-4 text-xl font-semibold text-gray-900">
          Recently Added Books
        </h2>
        
        {recentBooks.length === 0 ? (
          <Card className="bg-white p-6 text-center">
            <BookOpen className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-lg font-medium text-gray-900">
              No books available
            </h3>
            <p className="mt-1 text-gray-600">
              Check back soon for new listings.
            </p>
          </Card>
        ) : (
          <BookList initialBooks={recentBooks as BookWithOwner[]} showFilters={false} />
        )}
        
        {recentBooks.length > 0 && (
          <div className="mt-6 text-center">
            <NavLink href="/books">
              <Button variant="outline">View All Books</Button>
            </NavLink>
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}

================
File: src/app/dashboard/page.tsx
================
'use client';

import { useEffect, Suspense } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import { useLoading } from '@/components/LoadingProvider';
import Spinner from '@/components/ui/Spinner';

function DashboardRedirect() {
  const { user, isLoaded } = useUser();
  const router = useRouter();
  const { setIsLoading } = useLoading();
  
  useEffect(() => {
    if (!isLoaded) return;
    
    const redirectUser = async () => {
      setIsLoading(true);
      if (!user) {
        router.push('/sign-in');
        return;
      }
      const userRole = user.unsafeMetadata?.role as string;
      if (!userRole) {
        router.push('/auth/role-selection');
        return;
      }
      if (userRole === 'owner') {
        router.push('/dashboard/owner');
      } else {
        router.push('/dashboard/seeker');
      }
    };
    
    redirectUser();
  }, [isLoaded, user, router, setIsLoading]);
  
  return (
    <div className="flex h-[50vh] items-center justify-center">
      <div className="text-center">
        <Spinner size="lg" />
        <p className="mt-4 text-gray-600">Redirecting to your dashboard...</p>
      </div>
    </div>
  );
}

export default function DashboardPage() {
  return (
    <Suspense fallback={
      <div className="flex h-[50vh] items-center justify-center">
        <div className="text-center">
          <Spinner size="lg" />
          <p className="mt-4 text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    }>
      <DashboardRedirect />
    </Suspense>
  );
}

export const dynamic = 'force-dynamic';

================
File: src/app/not-found/page.tsx
================
'use client';

export const dynamic = 'force-dynamic'; 
// or export const revalidate = 0;
// or export const fetchCache = 'force-no-store';

import Link from 'next/link';
import { default as dynamicImport } from 'next/dynamic';
import { Suspense } from 'react';

const SearchParamsComponent = dynamicImport(
  () => import('@/components/SearchParamsComponent'),
  {
    ssr: false,
  }
);

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[70vh] py-12">
      <h1 className="text-4xl font-bold text-gray-900 mb-4">
        404 - Page Not Found
      </h1>

      <Suspense fallback={<div>Loading...</div>}>
        <SearchParamsComponent />
      </Suspense>

      <div className="mt-8">
        <Link href="/">Go back home</Link>
      </div>
    </div>
  );
}

================
File: src/app/sign-in/[[...sign-in]]/page.tsx
================
// src/app/sign-in/[[...sign-in]]/page.tsx
import { SignIn } from "@clerk/nextjs";

export default function SignInPage() {
  return (
    <div className="flex justify-center items-center min-h-screen">
      <SignIn />
    </div>
  );
}

================
File: src/app/sign-up/[[...sign-up]]/page.tsx
================
// src/app/sign-up/[[...sign-up]]/page.tsx
import { SignUp } from "@clerk/nextjs";

export default function SignUpPage() {
  return (
    <div className="flex justify-center items-center min-h-screen">
      <SignUp />
    </div>
  );
}

================
File: src/app/globals.css
================
/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  color: black;
  background: white;
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes pulseScale {
  0%, 100% {
    transform: scale(1);
    opacity: 0.6;
  }
  50% {
    transform: scale(1.05);
    opacity: 0.8;
  }
}

@keyframes spin-reverse {
  to {
    transform: rotate(-360deg);
  }
}

.animate-shimmer {
  animation: shimmer 2s infinite;
}

.animate-pulse-scale {
  animation: pulseScale 1.5s infinite;
}

.animation-reverse {
  animation-direction: reverse;
}


@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
// src/app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { ClerkProvider } from '@clerk/nextjs';
import { Toaster } from 'react-hot-toast';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import './globals.css';
import { LoadingProvider } from '@/components/LoadingProvider';
import { RouteChangeListener } from '@/components/RouteChangeListener';
import { Suspense } from 'react';
import dynamic from 'next/dynamic';

// Dynamically import the EnhancedLoader to avoid including it in the initial bundle
// This way it only loads when needed
const EnhancedLoader = dynamic(() => import('@/components/EnhancedLoader'), {
  loading: () => (
    <div className="fixed inset-0 bg-white bg-opacity-90 flex items-center justify-center z-50">
      <div className="w-10 h-10 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
    </div>
  )
});

const inter = Inter({ subsets: ['latin'], display: 'swap' });

export const metadata: Metadata = {
  title: 'BookShare - Peer-to-Peer Book Exchange',
  description: 'Connect with other book lovers to exchange, rent, or give away books in your community.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider
      publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      appearance={{
        layout: {
          shimmer: false, // Disable shimmer as it adds extra loading time
          logoPlacement: 'none', // Remove logo loading
        },
        variables: {
          colorPrimary: '#3b82f6' // Match our blue color
        }
      }}
    >
      <html lang="en" className="scroll-smooth">
        <body className={`${inter.className} antialiased`}>
          <LoadingProvider>
            <RouteChangeListener />
            <div className="flex min-h-screen flex-col">
              <Suspense fallback={<div className="h-16 bg-white shadow animate-pulse"></div>}>
                <Header />
              </Suspense>
              <main className="flex-1">
                <Suspense fallback={<EnhancedLoader />}>
                  {children}
                </Suspense>
              </main>
              <Suspense fallback={<div className="h-64 bg-gray-50 animate-pulse"></div>}>
                <Footer />
              </Suspense>
            </div>
            <Toaster
              position="top-right"
              toastOptions={{
                duration: 3000,
                style: {
                  background: '#363636',
                  color: '#fff',
                  borderRadius: '8px',
                },
                success: {
                  duration: 2000,
                  style: {
                    background: '#166534',
                  },
                },
                error: {
                  duration: 3000,
                  style: {
                    background: '#991b1b',
                  },
                },
              }}
            />
          </LoadingProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}

================
File: src/app/page.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import Link from "next/link"
import Image from "next/image"
import { motion, useScroll, useTransform, AnimatePresence } from "framer-motion"
import {
  BookOpen,
  Search,
  RefreshCw,
  ChevronRight,
  Users,
  MapPin,
  Sparkles,
  ArrowRight,
  BookMarked,
  Volume2,
  Maximize,
  Play,
  SkipForward,
} from "lucide-react"
import EnhancedButton from "@/components/ui/Button"
import NavLink from "@/components/ui/NavLink"

// Testimonial data
const testimonials = [
  {
    id: 1,
    content:
      "BookShare changed how I interact with books. I've met amazing people in my community and discovered titles I never would have found otherwise.",
    author: "Sarah M.",
    role: "Book Lover from Chicago",
    avatar: "/sarah.jpeg?height=40&width=40",
  },
  {
    id: 2,
    content:
      "As someone who reads constantly, BookShare has saved me hundreds of dollars while reducing waste. The platform is incredibly intuitive!",
    author: "James P.",
    role: "Literature Professor",
    avatar: "/james.jpeg?height=40&width=40",
  },
  {
    id: 3,
    content:
      "I listed my collection expecting just a few exchanges, but I've connected with dozens of readers who share my tastes. Such a fantastic community!",
    author: "Elena K.",
    role: "Book Owner from Austin",
    avatar: "/elena.jpeg?height=40&width=40",
  },
]

// Featured books
const featuredBooks = [
  {
    title: "The Midnight Library",
    author: "Matt Haig",
    cover: "/midnight.jpeg?height=180&width=120",
    location: "Portland, OR",
  },
  {
    title: "Educated",
    author: "Tara Westover",
    cover: "/educated.jpeg?height=180&width=120",
    location: "Seattle, WA",
  },
  {
    title: "Project Hail Mary",
    author: "Andy Weir",
    cover: "/projecthailmary.jpeg?height=180&width=120",
    location: "Austin, TX",
  },
  { title: "Pachinko", author: "Min Jin Lee", cover: "/pachinko.jpeg?height=180&width=120", location: "Chicago, IL" },
]

// Statistics
const stats = [
  { id: 1, value: "1,000+", label: "Active Users" },
  { id: 2, value: "25,000+", label: "Books Shared" },
  { id: 3, value: "1,500+", label: "Cities" },
  { id: 4, value: "4.8/5", label: "User Rating" },
]

// Book covers for hero section
const bookCovers = [
  {
    src: "/psychologyofmoney.jpg?height=250&width=180",
    alt: "Psychology of Money",
    rotate: "-12deg",
    top: "6%",
    left: "25%",
  },
  { src: "/thought.jpg?height=220&width=160", alt: "Thought", rotate: "-6deg", top: "8%", right: "33%" },
  { src: "/matt.jpg?height=280&width=200", alt: "Matt Haig", rotate: "3deg", top: "0", left: "33%", zIndex: 10 },
  { src: "/mockup.jpg?height=250&width=180", alt: "Mockup", rotate: "12deg", top: "4%", right: "25%" },
]

export default function Home() {
  const [activeTestimonial, setActiveTestimonial] = useState(0)
  const { scrollYProgress } = useScroll()
  const heroRef = useRef(null)
  const statsRef = useRef(null)
  const featuredRef = useRef(null)
  const testimonialsRef = useRef(null)
  const ctaRef = useRef(null)
  const [isHovering, setIsHovering] = useState(Array(featuredBooks.length).fill(false))

  // Parallax effects
  const y = useTransform(scrollYProgress, [0, 1], [0, -200])
  const opacity = useTransform(scrollYProgress, [0, 0.2], [1, 0.5])

  // Auto rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveTestimonial((prev) => (prev + 1) % testimonials.length)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  // Animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: [0.22, 1, 0.36, 1] },
    },
  }

  const fadeInLeft = {
    hidden: { opacity: 0, x: 50 },
    visible: {
      opacity: 1,
      x: 0,
      transition: { duration: 0.8, ease: [0.22, 1, 0.36, 1] },
    },
  }

  const fadeInRight = {
    hidden: { opacity: 0, x: -50 },
    visible: {
      opacity: 1,
      x: 0,
      transition: { duration: 0.8, ease: [0.22, 1, 0.36, 1] },
    },
  }

  const staggerChildren = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1,
      },
    },
  }

  const scaleIn = {
    hidden: { opacity: 0, scale: 0.9 },
    visible: {
      opacity: 1,
      scale: 1,
      transition: { duration: 0.6, ease: [0.22, 1, 0.36, 1] },
    },
  }

  interface HoverStateArray extends Array<boolean> {}

  const handleHover = (index: number, isHovering: boolean): void => {
    setIsHovering((prev: HoverStateArray) => {
      const newState: HoverStateArray = [...prev];
      newState[index] = isHovering;
      return newState;
    });
  };

  return (
    <div className="bg-gradient-to-b from-slate-50 via-white to-slate-50 overflow-hidden">
      {/* Hero Section */}
      <div className="relative overflow-hidden min-h-screen flex items-center" ref={heroRef}>
        {/* Background Effects */}
        <div className="absolute inset-0 z-0">
          <div className="absolute top-10 left-10 w-40 h-40 rounded-full bg-rose-200/70 mix-blend-multiply filter blur-xl opacity-80 animate-blob"></div>
          <div className="absolute top-0 right-20 w-60 h-60 rounded-full bg-violet-200/70 mix-blend-multiply filter blur-xl opacity-80 animate-blob animation-delay-1000"></div>
          <div className="absolute bottom-20 left-1/4 w-60 h-60 rounded-full bg-cyan-200/70 mix-blend-multiply filter blur-xl opacity-80 animate-blob animation-delay-2000"></div>
        </div>

        <div className="container mx-auto px-4 relative pt-24 pb-16 md:pt-32 md:pb-24">
          <motion.div style={{ y, opacity }} className="text-center max-w-4xl mx-auto">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
              className="mb-6 inline-flex items-center rounded-full px-6 py-2 bg-blue-100 text-blue-700 border border-blue-200"
            >
              <Sparkles className="mr-2 h-4 w-4" />
              <span className="text-sm font-medium">Revolutionizing Book Sharing</span>
            </motion.div>

            <motion.h1
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.3, ease: [0.22, 1, 0.36, 1] }}
              className="text-5xl md:text-7xl font-bold tracking-tight text-gray-900 mb-6"
            >
              <span className="block">Connect Through</span>
              <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                The Power of Books
              </span>
            </motion.h1>

            <motion.p
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.5, ease: [0.22, 1, 0.36, 1] }}
              className="mx-auto mt-6 max-w-2xl text-xl leading-relaxed text-gray-600"
            >
              Join our vibrant community of readers to discover, share, and exchange books with people in your area.
              Reduce waste, save money, and forge meaningful connections.
            </motion.p>

            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.7, ease: [0.22, 1, 0.36, 1] }}
              className="mt-10 flex flex-col sm:flex-row items-center justify-center gap-4"
            >
              <NavLink href="/sign-up">
                <EnhancedButton
                  size="md"
                  className="group rounded-full px-8 py-6 text-base font-medium shadow-lg shadow-blue-200/50 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 transition-all duration-300"
                >
                  Get Started
                  <ChevronRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </EnhancedButton>
              </NavLink>
              <NavLink href="/books">
                <EnhancedButton
                  variant="outline"
                  size="md"
                  className="rounded-full border-gray-300 px-8 py-6 text-base font-medium hover:bg-gray-50 transition-all duration-300"
                >
                  Browse Books
                </EnhancedButton>
              </NavLink>
            </motion.div>
          </motion.div>

          {/* Floating books visualization */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1.5, delay: 1 }}
            className="relative mt-12 h-48 md:h-80 mx-auto max-w-5xl"
          >
            {bookCovers.map((book, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{
                  duration: 0.8,
                  delay: 1 + index * 0.2,
                  ease: [0.22, 1, 0.36, 1],
                }}
                whileHover={{
                  y: -10,
                  rotate: book.rotate.replace("deg", "") === "0" ? "3deg" : "0deg",
                  transition: { duration: 0.3 },
                }}
                className="absolute shadow-2xl rounded-md"
                style={{
                  top: book.top,
                  left: book.left,
                  right: book.right,
                  transform: `rotate(${book.rotate})`,
                  zIndex: book.zIndex || 1,
                }}
              >
                <Image
                  src={book.src || "./matt.jpg"}
                  width={book.src.includes("200") ? 200 : 180}
                  height={book.src.includes("280") ? 280 : 250}
                  alt={book.alt}
                  className="rounded-md"
                />
              </motion.div>
            ))}
          </motion.div>
        </div>

        {/* Wave separator */}
        <div className="absolute bottom-0 left-0 w-full overflow-hidden">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" className="w-full">
            <path
              fill="#ffffff"
              fillOpacity="1"
              d="M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,122.7C672,117,768,139,864,138.7C960,139,1056,117,1152,122.7C1248,128,1344,160,1392,176L1440,192L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
            ></path>
          </svg>
        </div>
      </div>

      {/* Statistics Section */}
      <div ref={statsRef} className="bg-white py-16">
        <div className="container mx-auto px-4">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={staggerChildren}
            className="grid grid-cols-2 md:grid-cols-4 gap-8 text-center"
          >
            {stats.map((stat) => (
              <motion.div
                key={stat.id}
                variants={fadeInUp}
                whileHover={{ y: -5, transition: { duration: 0.2 } }}
                className="p-6 rounded-xl bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300"
              >
                <p className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  {stat.value}
                </p>
                <p className="mt-2 text-sm text-gray-600 font-medium">{stat.label}</p>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>

      {/* How It Works Section */}
      <div className="py-24">
        <div className="container mx-auto px-4 py-24">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={staggerChildren}
            className="text-center mb-16"
          >
            <motion.h2 variants={fadeInUp} className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">
              How BookShare Works
            </motion.h2>
            <motion.p variants={fadeInUp} className="mx-auto max-w-3xl text-lg text-gray-600">
              Our platform makes it easy to connect with fellow readers and share your love for books
            </motion.p>
          </motion.div>

          <div className="grid gap-12 md:grid-cols-3">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
              whileHover={{ y: -10, transition: { duration: 0.3 } }}
              className="relative"
            >
              <div className="mb-6 inline-flex h-16 w-16 items-center justify-center rounded-full bg-blue-100">
                <BookOpen className="h-8 w-8 text-blue-600" />
              </div>
              <div className="absolute top-8 right-0 w-full border-t-2 border-dashed border-gray-200 hidden md:block"></div>
              <h3 className="mb-4 text-xl font-bold">List Your Collection</h3>
              <p className="text-gray-600">
                Share books you've enjoyed and are willing to lend or exchange with others in your community.
              </p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
              whileHover={{ y: -10, transition: { duration: 0.3 } }}
              className="relative"
            >
              <div className="mb-6 inline-flex h-16 w-16 items-center justify-center rounded-full bg-cyan-100">
                <Search className="h-8 w-8 text-cyan-600" />
              </div>
              <div className="absolute top-8 right-0 w-full border-t-2 border-dashed border-gray-200 hidden md:block"></div>
              <h3 className="mb-4 text-xl font-bold">Discover Books</h3>
              <p className="text-gray-600">
                Browse through thousands of titles available in your area, filtered by genre, location, and
                availability.
              </p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.8, delay: 0.4, ease: [0.22, 1, 0.36, 1] }}
              whileHover={{ y: -10, transition: { duration: 0.3 } }}
            >
              <div className="mb-6 inline-flex h-16 w-16 items-center justify-center rounded-full bg-violet-100">
                <RefreshCw className="h-8 w-8 text-violet-600" />
              </div>
              <h3 className="mb-4 text-xl font-bold">Exchange & Connect</h3>
              <p className="text-gray-600">
                Arrange meetups with book owners, exchange reads, and build relationships with fellow literature
                enthusiasts.
              </p>
            </motion.div>
          </div>
        </div>
      </div>

      {/* Featured Books */}
      <div className="bg-gradient-to-b from-white to-slate-50 py-24" ref={featuredRef}>
        <div className="container mx-auto px-4">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={staggerChildren}
            className="mb-12"
          >
            <motion.h2 variants={fadeInUp} className="text-3xl md:text-4xl font-bold text-center text-gray-900 mb-4">
              Featured Books
            </motion.h2>
            <motion.p variants={fadeInUp} className="text-center mx-auto max-w-3xl text-lg text-gray-600">
              Explore some of the popular books currently available on our platform
            </motion.p>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={staggerChildren}
            className="grid gap-8 md:grid-cols-4"
          >
            {featuredBooks.map((book, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                onHoverStart={() => handleHover(index, true)}
                onHoverEnd={() => handleHover(index, false)}
                whileHover={{
                  y: -10,
                  transition: { duration: 0.3, ease: [0.22, 1, 0.36, 1] },
                }}
                className="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100 transform transition-all duration-300 hover:shadow-xl"
              >
                <div className="p-4 flex justify-center relative">
                  <motion.div
                    animate={{
                      rotateY: isHovering[index] ? "10deg" : "0deg",
                      scale: isHovering[index] ? 1.05 : 1,
                    }}
                    transition={{ duration: 0.5, ease: [0.22, 1, 0.36, 1] }}
                  >
                    <Image
                      src={book.cover || "/placeholder.svg"}
                      width={120}
                      height={180}
                      alt={book.title}
                      className="rounded shadow-md h-[180px] object-cover"
                    />
                  </motion.div>
                </div>
                <div className="p-6 bg-white">
                  <h3 className="text-lg font-bold text-gray-900">{book.title}</h3>
                  <p className="text-gray-600 mb-3">{book.author}</p>
                  <div className="flex items-center text-sm text-gray-500">
                    <MapPin className="h-4 w-4 mr-1" />
                    <span>{book.location}</span>
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.6, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="mt-12 text-center"
          >
            <NavLink href="/books">
              <EnhancedButton
                variant="outline"
                className="rounded-full border-blue-300 px-8 py-6 text-blue-700 hover:bg-blue-50 transition-all duration-300"
              >
                Explore All Books
                <ArrowRight className="ml-2 h-4 w-4" />
              </EnhancedButton>
            </NavLink>
          </motion.div>
        </div>
      </div>

      {/* Testimonials */}
      <div className="bg-slate-50 py-24" ref={testimonialsRef}>
        <div className="container mx-auto px-4">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={staggerChildren}
            className="text-center mb-16"
          >
            <motion.h2 variants={fadeInUp} className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              What Our Users Say
            </motion.h2>
            <motion.p variants={fadeInUp} className="mx-auto max-w-3xl text-lg text-gray-600">
              Join thousands of satisfied readers who've discovered new books and made meaningful connections
            </motion.p>
          </motion.div>

          <div className="relative max-w-4xl mx-auto">
            <div className="absolute inset-0 flex items-center justify-between z-10 pointer-events-none">
              <EnhancedButton
                onClick={() => setActiveTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length)}
                className="bg-white w-10 h-10 rounded-full shadow-lg flex items-center justify-center pointer-events-auto focus:outline-none hover:bg-gray-50 transition-colors duration-300"
              >
                <ChevronRight className="h-5 w-5 transform rotate-180 text-gray-500" />
              </EnhancedButton>
              <EnhancedButton
                onClick={() => setActiveTestimonial((prev) => (prev + 1) % testimonials.length)}
                className="bg-white w-10 h-10 rounded-full shadow-lg flex items-center justify-center pointer-events-auto focus:outline-none hover:bg-gray-50 transition-colors duration-300"
              >
                <ChevronRight className="h-5 w-5 text-gray-500" />
              </EnhancedButton>
            </div>

            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
              className="relative overflow-hidden rounded-2xl bg-white shadow-xl px-6 py-10 md:px-10 md:py-16"
            >
              <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-blue-500 to-purple-500"></div>

              <div className="text-5xl text-blue-200 absolute top-8 left-8">"</div>

              <AnimatePresence mode="wait">
                <motion.div
                  key={activeTestimonial}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.5, ease: [0.22, 1, 0.36, 1] }}
                  className="relative z-10"
                >
                  <p className="text-xl md:text-2xl text-gray-800 leading-relaxed relative z-10 mb-8">
                    {testimonials[activeTestimonial].content}
                  </p>

                  <div className="flex items-center">
                    <div className="flex-shrink-0 mr-4">
                      <Image
                        src={testimonials[activeTestimonial].avatar || "/placeholder.svg"}
                        width={40}
                        height={40}
                        alt={testimonials[activeTestimonial].author}
                        className="rounded-full"
                      />
                    </div>
                    <div>
                      <div className="font-medium text-gray-900">{testimonials[activeTestimonial].author}</div>
                      <div className="text-gray-600 text-sm">{testimonials[activeTestimonial].role}</div>
                    </div>
                  </div>
                </motion.div>
              </AnimatePresence>

              <div className="text-5xl text-blue-200 absolute bottom-8 right-8">"</div>
            </motion.div>

            <div className="flex justify-center mt-8 space-x-2">
              {testimonials.map((_, index) => (
                <EnhancedButton
                  key={index}
                  onClick={() => setActiveTestimonial(index)}
                  className={`w-2.5 h-2.5 rounded-full transition-all duration-300 ${
                    index === activeTestimonial ? "bg-blue-600 scale-125" : "bg-gray-300"
                  }`}
                  aria-label={`Go to testimonial ${index + 1}`}
                />
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Benefits Section */}
      <div className="container mx-auto px-4 py-24">
        <motion.div
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, margin: "-100px" }}
          variants={staggerChildren}
          className="text-center mb-12"
        >
          <motion.h2 variants={fadeInUp} className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Why Choose BookShare?
          </motion.h2>
          <motion.p variants={fadeInUp} className="mx-auto max-w-3xl text-lg text-gray-600">
            Our platform brings together book lovers in a sustainable, community-focused way
          </motion.p>
        </motion.div>

        <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {[
            {
              icon: <RefreshCw className="h-6 w-6 text-emerald-600" />,
              title: "Sustainable Reading",
              description: "Reduce waste and give books new life by sharing them within your community.",
              color: "emerald",
            },
            {
              icon: <Users className="h-6 w-6 text-blue-600" />,
              title: "Community Building",
              description:
                "Connect with like-minded readers and form meaningful relationships around shared interests.",
              color: "blue",
            },
            {
              icon: <BookMarked className="h-6 w-6 text-violet-600" />,
              title: "Discover Hidden Gems",
              description: "Find unique titles and recommendations that algorithm-based platforms might never suggest.",
              color: "violet",
            },
            {
              icon: <MapPin className="h-6 w-6 text-amber-600" />,
              title: "Local Connections",
              description: "Meet people in your neighborhood who share your passion for reading and storytelling.",
              color: "amber",
            },
            {
              icon: (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6 text-red-600"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83" />
                </svg>
              ),
              title: "Cost Effective",
              description: "Save money on books by borrowing or exchanging rather than always buying new.",
              color: "red",
            },
            {
              icon: (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6 text-indigo-600"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                  <circle cx="8.5" cy="8.5" r="1.5" />
                  <path d="M20.4 14.5L16 10 4 20" />
                </svg>
              ),
              title: "Safe & Secure",
              description: "Our platform prioritizes user safety with verified profiles and secure messaging.",
              color: "indigo",
            },
          ].map((benefit, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.6, delay: index * 0.1, ease: [0.22, 1, 0.36, 1] }}
              whileHover={{
                y: -10,
                boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
                transition: { duration: 0.3 },
              }}
              className="p-6 bg-white rounded-xl shadow border border-gray-100 transition-all duration-300"
            >
              <div className={`w-12 h-12 bg-${benefit.color}-100 rounded-lg flex items-center justify-center mb-4`}>
                {benefit.icon}
              </div>
              <h3 className="text-xl font-bold mb-2">{benefit.title}</h3>
              <p className="text-gray-600">{benefit.description}</p>
            </motion.div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 py-20" ref={ctaRef}>
        <div className="container mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-center"
          >
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-6">Ready to Start Your Reading Journey?</h2>
            <p className="mx-auto max-w-2xl text-xl text-blue-100 mb-10">
              Join thousands of book lovers already connecting, sharing, and discovering new reads on BookShare.
            </p>

            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <NavLink href="/sign-up">
                <EnhancedButton
                  size="lg"
                  className="bg-white text-blue-600 hover:bg-blue-50 rounded-full px-8 py-6 text-lg font-medium shadow-lg transition-all duration-300"
                >
                  Sign Up Now
                </EnhancedButton>
              </NavLink>
              <NavLink href="/books">
                <EnhancedButton
                  variant="outline"
                  size="lg"
                  className="border-white text-white hover:bg-purple-500 rounded-full px-8 py-6 text-lg font-medium transition-all duration-300"
                >
                  Browse Books
                </EnhancedButton>
              </NavLink>
            </div>
          </motion.div>
        </div>
      </div>

      {/* App Preview Section */}
      <div className="container mx-auto px-4 py-24">
        <div className="grid md:grid-cols-2 gap-12 items-center">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={fadeInRight}
          >
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">Take BookShare Everywhere</h2>
            <p className="text-lg text-gray-600 mb-8">
              Our responsive platform works seamlessly across all your devices. Browse, share, and connect whether
              you're at home or on the go.
            </p>

            <div className="space-y-6">
              {[
                {
                  title: "Instant Notifications",
                  description: "Receive real-time updates when someone is interested in your books.",
                },
                {
                  title: "Seamless Messaging",
                  description: "Communicate easily with other members to arrange exchanges.",
                },
                {
                  title: "Location-Based Matching",
                  description: "Find books and readers nearby for convenient exchanges.",
                },
              ].map((feature, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  viewport={{ once: true, margin: "-100px" }}
                  transition={{ duration: 0.5, delay: 0.2 * index, ease: [0.22, 1, 0.36, 1] }}
                  className="flex"
                >
                  <div className="flex-shrink-0 mt-1">
                    <div className="flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 text-blue-600">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                      </svg>
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-lg font-semibold text-gray-900">{feature.title}</h3>
                    <p className="mt-1 text-gray-600">{feature.description}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, margin: "-100px" }}
            variants={scaleIn}
            className="relative"
          >
            <div className="relative mx-auto max-w-[350px]">
              <div className="absolute -top-6 -left-6 w-64 h-64 bg-blue-200 rounded-full mix-blend-multiply filter blur-2xl opacity-70"></div>
              <div className="absolute -bottom-10 -right-10 w-64 h-64 bg-violet-200 rounded-full mix-blend-multiply filter blur-2xl opacity-70"></div>

              <motion.div
                whileHover={{
                  y: -10,
                  transition: { duration: 0.5, ease: [0.22, 1, 0.36, 1] },
                }}
                className="relative rounded-[2.5rem] bg-gradient-to-r from-gray-800 to-gray-900 p-4 shadow-2xl ring-1 ring-gray-900/10"
              >
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-1/3 h-1 bg-gray-700 rounded-b-lg"></div>
                <Image
                  src="/library.jpg"
                  width={320}
                  height={850}
                  alt="BookShare app preview"
                  className="rounded-[2rem] shadow-sm"
                />
              </motion.div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Final CTA / Newsletter */}
      <div className="bg-gray-50 py-24">
        <div className="container mx-auto px-4">
          <div className="mx-auto max-w-3xl text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            >
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">Stay Updated with BookShare</h2>
              <p className="text-lg text-gray-600 mb-8">
                Sign up for our newsletter to receive updates on new features, community events, and reading
                recommendations.
              </p>

              <div className="flex flex-col sm:flex-row gap-2 max-w-lg mx-auto">
                <input
                  type="email"
                  placeholder="Enter your email"
                  className="flex-grow px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-blue-500 transition-all duration-300"
                />
                <EnhancedButton className="px-6 py-3 rounded-lg bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 transition-all duration-300">
                  Subscribe
                </EnhancedButton>
              </div>

              <p className="mt-4 text-sm text-gray-500">We respect your privacy. Unsubscribe at any time.</p>
            </motion.div>
          </div>
        </div>
      </div>


      {/* Custom CSS for Animations */}
      <style jsx global>{`
        @keyframes blob {
          0% {
            transform: translate(0px, 0px) scale(1);
          }
          33% {
            transform: translate(30px, -50px) scale(1.1);
          }
          66% {
            transform: translate(-20px, 20px) scale(0.9);
          }
          100% {
            transform: translate(0px, 0px) scale(1);
          }
        }
        
        .animate-blob {
          animation: blob 5s infinite;
        }
        
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        
        .animation-delay-4000 {
          animation-delay: 4s;
        }
      `}</style>
    </div>
  )
}

================
File: src/components/books/BookCard.tsx
================
'use client';

import { useState } from 'react';
import { BookWithOwner } from '@/types';
import { BookOpen, MapPin, Calendar, Heart } from 'lucide-react';
import Badge from '@/components/ui/Badge';
import Avatar from '@/components/ui/Avatar';
import NavLink from '@/components/ui/NavLink';
import { formatDate } from '@/lib/utils';

interface BookCardProps {
  book: BookWithOwner;
  actions?: React.ReactNode;
  featured?: boolean;
}

export default function BookCard({ 
  book, 
  actions, 
  featured = false 
}: BookCardProps) {
  const [isLiked, setIsLiked] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  
  // Generate placeholder image URL based on book title
  const imageUrl = book.coverImage || `/api/placeholder/400/600?text=${encodeURIComponent(book.title)}`;

  const handleLike = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsLiked(!isLiked);
  };

  return (
    <div 
      className={`group relative rounded-xl bg-white shadow-md transition-all duration-300 hover:-translate-y-2 hover:shadow-xl ${
        featured ? 'border-2 border-blue-200' : 'border border-gray-100'
      }`}
    >
      <NavLink href={`/books/${book.id}`} className="block h-full">
        <div className="relative">
          {/* Cover Image with skeleton loading state */}
          <div className="aspect-[2/3] overflow-hidden rounded-t-xl relative">
            {!imageLoaded && (
              <div className="absolute inset-0 bg-gray-200 animate-pulse"></div>
            )}
            <img
              src={imageUrl}
              alt={book.title}
              className={`h-full w-full object-cover transition-all duration-500 group-hover:scale-105 ${
                imageLoaded ? 'opacity-100' : 'opacity-0'
              }`}
              onLoad={() => setImageLoaded(true)}
              loading="lazy"
            />
            
            {/* Like button */}
            <button 
              onClick={handleLike} 
              className="absolute top-3 right-3 z-10 p-2 rounded-full bg-white/80 backdrop-blur-sm shadow-sm hover:bg-white transition-colors"
            >
              <Heart 
                className={`h-5 w-5 transition-colors ${
                  isLiked ? 'fill-red-500 text-red-500' : 'text-gray-600'
                }`} 
              />
            </button>
            
            {/* Status badge */}
            <div className="absolute top-3 left-3">
              <Badge status={book.status as 'available' | 'rented' | 'exchanged'} />
            </div>
            
            {/* Genre tag if available */}
            {book.genre && (
              <div className="absolute bottom-3 left-3">
                <span className="inline-flex items-center rounded-full bg-black/60 backdrop-blur-sm px-2.5 py-0.5 text-xs font-medium text-white">
                  {book.genre}
                </span>
              </div>
            )}
          </div>
          
          {/* Book details */}
          <div className="p-4">
            <h3 className="text-lg font-medium text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1">
              {book.title}
            </h3>
            <p className="text-sm text-gray-600 mt-1 flex items-center">
              <BookOpen className="mr-1 h-4 w-4 text-gray-400 flex-shrink-0" />
              <span className="line-clamp-1">{book.author}</span>
            </p>
            
            <div className="mt-3 flex items-center justify-between">
              <div className="flex items-center text-xs text-gray-500">
                <MapPin className="mr-1 h-3 w-3 flex-shrink-0" />
                <span className="truncate max-w-[100px]">{book.location}</span>
              </div>
              
              {book.owner && (
                <div className="flex items-center text-xs text-gray-500">
                  <Avatar 
                    name={book.owner.name} 
                    size="sm"
                    className="mr-1 h-5 w-5 flex-shrink-0" 
                  />
                  <span className="truncate max-w-[80px]">{book.owner.name}</span>
                </div>
              )}
            </div>
            
            <div className="mt-3 text-xs text-gray-400 flex items-center">
              <Calendar className="mr-1 h-3 w-3 flex-shrink-0" />
              <span className="line-clamp-1">Added {formatDate(book.createdAt)}</span>
            </div>
          </div>
        </div>
      </NavLink>
      
      {actions && (
        <div className="border-t border-gray-100 bg-gray-50 px-4 py-3 rounded-b-xl">
          {actions}
        </div>
      )}
      
      {/* Featured tag */}
      {featured && (
        <div className="absolute -top-3 -right-3 transform rotate-12">
          <span className="inline-flex items-center rounded-full bg-blue-600 px-3 py-1 text-xs font-medium text-white shadow-lg">
            Featured
          </span>
        </div>
      )}
    </div>
  );
}

================
File: src/components/books/BookDetail.tsx
================
'use client';

import { useState } from 'react';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { BookWithOwner } from '@/types';
import { Mail, MapPin, Phone, BookOpen, Tag, Calendar, Share2, Heart, MessageCircle, Star, AlertTriangle } from 'lucide-react';
import Badge from '@/components/ui/Badge';
import Avatar from '@/components/ui/Avatar';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { formatDate } from '@/lib/utils';
import Modal from '@/components/ui/Modal';
import Input from '@/components/ui/Input';
import toast from 'react-hot-toast';

interface BookDetailProps {
  book: BookWithOwner;
  isOwner: boolean;
  onStatusChange?: (status: string) => void;
}

export default function BookDetail({
  book,
  isOwner,
  onStatusChange,
}: BookDetailProps) {
  const [loading, setLoading] = useState(false);
  const [liked, setLiked] = useState(false);
  const [showContactModal, setShowContactModal] = useState(false);
  const [showShareModal, setShowShareModal] = useState(false);
  const [showReportModal, setShowReportModal] = useState(false);
  const [contactMessage, setContactMessage] = useState('');
  const [imageLoaded, setImageLoaded] = useState(false);

  const handleStatusChange = async (status: string) => {
    if (!onStatusChange) return;
    
    try {
      setLoading(true);
      await onStatusChange(status);
    } finally {
      setLoading(false);
    }
  };

  const handleLike = () => {
    setLiked(!liked);
    toast.success(liked ? 'Removed from favorites' : 'Added to favorites');
  };

  const handleShare = () => {
    // In a real app, we would implement actual sharing functionality
    navigator.clipboard.writeText(window.location.href);
    toast.success('Link copied to clipboard');
    setShowShareModal(false);
  };

  const handleContact = () => {
    if (!contactMessage.trim()) {
      toast.error('Please enter a message');
      return;
    }
    
    // In a real app, we would send the message to the owner
    toast.success('Message sent to the owner');
    setContactMessage('');
    setShowContactModal(false);
  };

  const handleReport = () => {
    // In a real app, we would implement actual reporting functionality
    toast.success('Thank you for your report. We will review this listing.');
    setShowReportModal(false);
  };

  // Generate placeholder image URL based on book title
  const imageUrl = book.coverImage || `/api/placeholder/300/450?text=${encodeURIComponent(book.title)}`;

  // Calculate availability color based on status
  const statusColor = 
    book.status === 'available' ? 'bg-green-500' :
    book.status === 'rented' ? 'bg-blue-500' : 'bg-gray-500';

  return (
    <div className="space-y-6">
      <Card className="overflow-hidden border-0 shadow-lg rounded-2xl">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 p-6 md:p-8">
          <div className="md:col-span-1">
            <div className="relative">
              <div className="aspect-[2/3] relative rounded-lg overflow-hidden shadow-lg mb-4">
                <div className={`absolute inset-0 bg-gray-200 animate-pulse ${imageLoaded ? 'hidden' : 'block'}`}></div>
                <Image 
                  src={imageUrl}
                  alt={book.title}
                  fill
                  className="object-cover transition-opacity duration-500"
                  onLoadingComplete={() => setImageLoaded(true)}
                />
                
                {/* Like button */}
                <button 
                  onClick={handleLike}
                  className="absolute top-3 right-3 z-10 p-2 rounded-full bg-white/80 backdrop-blur-sm shadow-sm hover:bg-white transition-colors"
                >
                  <Heart 
                    className={`h-5 w-5 transition-colors ${liked ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} 
                  />
                </button>
                
                {/* Status indicator */}
                <div className="absolute top-3 left-3">
                  <Badge status={book.status as 'available' | 'rented' | 'exchanged'} className="shadow-md" />
                </div>
              </div>
              
              <div className="flex items-center justify-center mb-4">
                <div className={`h-3 w-3 rounded-full ${statusColor} mr-2`}></div>
                <span className="text-sm font-medium capitalize">
                  {book.status === 'available' ? 'Available now' : book.status}
                </span>
              </div>
              
              <div className="space-y-3">
                <Button 
                  variant="primary" 
                  fullWidth 
                  className="py-3 rounded-xl"
                  onClick={() => setShowContactModal(true)}
                >
                  <MessageCircle className="mr-2 h-4 w-4" />
                  Contact Owner
                </Button>
                
                <Button 
                  variant="outline" 
                  fullWidth 
                  className="py-3 rounded-xl"
                  onClick={() => setShowShareModal(true)}
                >
                  <Share2 className="mr-2 h-4 w-4" />
                  Share Book
                </Button>
              </div>
              
              <div className="mt-6 text-center">
                <button 
                  onClick={() => setShowReportModal(true)} 
                  className="text-xs text-gray-500 hover:text-gray-700 flex items-center justify-center w-full"
                >
                  <AlertTriangle className="h-3 w-3 mr-1" />
                  Report this listing
                </button>
              </div>
            </div>
          </div>
          
          <div className="md:col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <div className="flex justify-between items-start">
                <div>
                  <h1 className="text-3xl font-bold text-gray-900 tracking-tight">{book.title}</h1>
                  <p className="text-xl text-gray-700 mt-1">by {book.author}</p>
                </div>
              </div>
              
              <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                {book.genre && (
                  <div className="flex items-center">
                    <div className="p-2 rounded-full bg-blue-50 mr-3">
                      <BookOpen className="h-5 w-5 text-blue-600" />
                    </div>
                    <div>
                      <span className="text-sm text-gray-500">Genre</span>
                      <div className="font-medium text-gray-900">{book.genre}</div>
                    </div>
                  </div>
                )}
                
                {book.condition && (
                  <div className="flex items-center">
                    <div className="p-2 rounded-full bg-green-50 mr-3">
                      <Star className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <span className="text-sm text-gray-500">Condition</span>
                      <div className="font-medium text-gray-900 capitalize">{book.condition}</div>
                    </div>
                  </div>
                )}
                
                <div className="flex items-center">
                  <div className="p-2 rounded-full bg-purple-50 mr-3">
                    <MapPin className="h-5 w-5 text-purple-600" />
                  </div>
                  <div>
                    <span className="text-sm text-gray-500">Location</span>
                    <div className="font-medium text-gray-900">{book.location}</div>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="p-2 rounded-full bg-amber-50 mr-3">
                    <Calendar className="h-5 w-5 text-amber-600" />
                  </div>
                  <div>
                    <span className="text-sm text-gray-500">Listed on</span>
                    <div className="font-medium text-gray-900">{formatDate(book.createdAt)}</div>
                  </div>
                </div>
              </div>
              
              {book.description && (
                <div className="mt-8">
                  <h2 className="text-xl font-semibold text-gray-900 mb-3">Description</h2>
                  <div className="prose prose-blue max-w-none text-gray-600 bg-gray-50 p-5 rounded-xl border border-gray-100">
                    <p>{book.description}</p>
                  </div>
                </div>
              )}
              
              <div className="mt-10 pt-10 border-t border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">About the Owner</h2>
                <div className="flex items-start p-4 bg-blue-50 rounded-xl border border-blue-100">
                  <Avatar name={book.owner.name} size="lg" className="mr-4" />
                  <div>
                    <h3 className="font-medium text-lg text-gray-900">{book.owner.name}</h3>
                    {/* {book.owner.location && (
                      <p className="text-gray-600 text-sm flex items-center mt-1">
                        <MapPin className="h-4 w-4 mr-1" />
                        {book.owner.location}
                      </p>
                    )} */}
                    <div className="mt-3">
                      <span className="inline-flex items-center rounded-full bg-white px-2.5 py-0.5 text-xs font-medium text-gray-700 border border-gray-200">
                        Contact: {book.contactInfo}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              
              {isOwner && onStatusChange && (
                <div className="mt-8 bg-amber-50 rounded-xl p-5 border border-amber-200">
                  <h3 className="font-medium text-amber-800 mb-3">Manage Book Status</h3>
                  <div className="grid grid-cols-3 gap-3">
                    <Button
                      onClick={() => handleStatusChange('available')}
                      disabled={book.status === 'available' || loading}
                      variant={book.status === 'available' ? 'primary' : 'outline'}
                      fullWidth
                      className={book.status === 'available' ? 'bg-green-600 hover:bg-green-700' : ''}
                    >
                      Available
                    </Button>
                    <Button
                      onClick={() => handleStatusChange('rented')}
                      disabled={book.status === 'rented' || loading}
                      variant={book.status === 'rented' ? 'primary' : 'outline'}
                      fullWidth
                      className={book.status === 'rented' ? 'bg-blue-600 hover:bg-blue-700' : ''}
                    >
                      Rented
                    </Button>
                    <Button
                      onClick={() => handleStatusChange('exchanged')}
                      disabled={book.status === 'exchanged' || loading}
                      variant={book.status === 'exchanged' ? 'primary' : 'outline'}
                      fullWidth
                      className={book.status === 'exchanged' ? 'bg-gray-600 hover:bg-gray-700' : ''}
                    >
                      Exchanged
                    </Button>
                  </div>
                </div>
              )}
              
            </motion.div>
          </div>
        </div>
      </Card>
      
      {/* Contact Modal */}
      <Modal
        isOpen={showContactModal}
        onClose={() => setShowContactModal(false)}
        title="Contact Book Owner"
        size="md"
      >
        <div className="space-y-4">
          <div className="flex items-center mb-4">
            <Avatar name={book.owner.name} className="mr-3" />
            <div>
              <h3 className="font-medium">{book.owner.name}</h3>
              <p className="text-sm text-gray-500">Owner of "{book.title}"</p>
            </div>
          </div>
          
          <div>
            <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
              Your Message
            </label>
            <textarea
              id="message"
              rows={4}
              value={contactMessage}
              onChange={(e) => setContactMessage(e.target.value)}
              placeholder="Hi, I'm interested in your book..."
              className="block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
            />
          </div>
          
          <div className="flex space-x-3 pt-4">
            <Button onClick={handleContact} fullWidth>
              Send Message
            </Button>
            <Button variant="outline" onClick={() => setShowContactModal(false)} fullWidth>
              Cancel
            </Button>
          </div>
        </div>
      </Modal>
      
      {/* Share Modal */}
      <Modal
        isOpen={showShareModal}
        onClose={() => setShowShareModal(false)}
        title="Share This Book"
        size="sm"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-center mb-4">
          <div className="aspect-[2/3] relative rounded-lg overflow-hidden shadow-lg mb-4">
  <div className={`absolute inset-0 bg-gray-200 animate-pulse ${imageLoaded ? 'hidden' : 'block'}`}></div>
  <Image 
    src={imageUrl}
    alt={book.title}
    fill
    className="object-cover transition-opacity duration-500"
    onLoadingComplete={() => setImageLoaded(true)}
    unoptimized={book.coverImage?.startsWith('data:') ? true : false}
  />
  
  {/* Like button */}
  <button 
    onClick={handleLike}
    className="absolute top-3 right-3 z-10 p-2 rounded-full bg-white/80 backdrop-blur-sm shadow-sm hover:bg-white transition-colors"
  >
    <Heart 
      className={`h-5 w-5 transition-colors ${liked ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} 
    />
  </button>
  
  {/* Status indicator */}
  <div className="absolute top-3 left-3">
    <Badge status={book.status as 'available' | 'rented' | 'exchanged'} className="shadow-md" />
  </div>
</div>
          </div>
          
          <div className="text-center">
            <h3 className="font-medium">{book.title}</h3>
            <p className="text-sm text-gray-500">by {book.author}</p>
          </div>
          
          <div className="bg-gray-50 rounded-md p-3 text-center border border-gray-200">
            <span className="text-sm text-gray-700 break-all">{typeof window !== 'undefined' ? window.location.href : ''}</span>
          </div>
          
          <div className="flex space-x-3 pt-4">
            <Button onClick={handleShare} fullWidth>
              Copy Link
            </Button>
            <Button variant="outline" onClick={() => setShowShareModal(false)} fullWidth>
              Cancel
            </Button>
          </div>
        </div>
      </Modal>
      
      {/* Report Modal */}
      <Modal
        isOpen={showReportModal}
        onClose={() => setShowReportModal(false)}
        title="Report Listing"
        size="sm"
      >
        <div className="space-y-4">
          <p className="text-sm text-gray-600">
            If you believe this listing violates our community guidelines, please let us know why.
          </p>
          
          <div>
            <label htmlFor="reportReason" className="block text-sm font-medium text-gray-700 mb-1">
              Reason for Report
            </label>
            <select
              id="reportReason"
              className="block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
            >
              <option>Inappropriate content</option>
              <option>Misleading information</option>
              <option>Spam or scam</option>
              <option>Duplicate listing</option>
              <option>Other</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="reportDetails" className="block text-sm font-medium text-gray-700 mb-1">
              Additional Details (Optional)
            </label>
            <textarea
              id="reportDetails"
              rows={3}
              placeholder="Please provide any additional information..."
              className="block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
            />
          </div>
          
          <div className="flex space-x-3 pt-4">
            <Button onClick={handleReport} variant="danger" fullWidth>
              Submit Report
            </Button>
            <Button variant="outline" onClick={() => setShowReportModal(false)} fullWidth>
              Cancel
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/books/BookFilter.tsx
================
'use client';

import { useState, useCallback, useEffect } from 'react';
import { Search, X, Filter, Ghost } from 'lucide-react';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import Select from '@/components/ui/Select';
import { motion, AnimatePresence } from 'framer-motion';

export const bookStatuses = [
  { value: 'available', label: 'Available' },
  { value: 'rented', label: 'Rented' },
  { value: 'unavailable', label: 'Unavailable' },
];

export const bookGenres = [
  'Fiction',
  'Non-Fiction',
  'Science Fiction',
  'Fantasy',
  'Mystery',
  'Romance',
  'Horror',
  'Biography',
  'History',
  'Self-Help',
  'Business',
  'Cooking',
  'Travel',
  'Poetry'
];

interface BookFilterProps {
  onFilterChange: (filters: {
    title: string;
    location: string;
    genre: string;
    status: string;
  }) => void;
  activeFilters?: {
    title: string;
    location: string;
    genre: string;
    status: string;
  };
}

export default function BookFilter({ 
  onFilterChange, 
  activeFilters = { title: '', location: '', genre: '', status: '' } 
}: BookFilterProps) {
  const [filters, setFilters] = useState<{
    [key: string]: string;
    title: string;
    location: string;
    genre: string;
    status: string;
  }>({
    title: activeFilters.title || '',
    location: activeFilters.location || '',
    genre: activeFilters.genre || '',
    status: activeFilters.status || '',
  });
  
  const [isExpanded, setIsExpanded] = useState(false);
  const [activeCount, setActiveCount] = useState(0);

  // Count active filters
  useEffect(() => {
    setActiveCount(Object.values(filters).filter(Boolean).length);
  }, [filters]);
  
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onFilterChange(filters);
  };
  

  const handleReset = () => {
    const resetFilters = {
      title: '',
      location: '',
      genre: '',
      status: '',
    };
    setFilters(resetFilters);
    onFilterChange(resetFilters);
  };
  
  const handleQuickFilterClick = (name: string, value: string) => {
    const newFilters = { ...filters, [name]: value };
    setFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Generate status chips
  const statusChips = bookStatuses.map(status => ({
    name: 'status',
    value: status.value,
    label: status.label,
    color: 
      status.value === 'available' ? 'bg-green-50 text-green-700 border-green-200' :
      status.value === 'rented' ? 'bg-blue-50 text-blue-700 border-blue-200' :
      'bg-gray-50 text-gray-700 border-gray-200'
  }));
  
  // Generate popular locations (these would typically come from your backend)
  const popularLocations = [
    { name: 'location', value: 'New York', label: 'New York' },
    { name: 'location', value: 'Los Angeles', label: 'Los Angeles' },
    { name: 'location', value: 'Chicago', label: 'Chicago' },
    { name: 'location', value: 'Boston', label: 'Boston' },
  ];
  
  // Generate genre chips from the utility function
  const genreChips = bookGenres.slice(0, 6).map(genre => ({
    name: 'genre',
    value: genre,
    label: genre,
    color: 'bg-purple-50 text-purple-700 border-purple-200'
  }));

  return (
    <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
      <div className="p-4 sm:p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-gray-900 flex items-center">
            <Filter className="mr-2 h-5 w-5 text-gray-500" />
            Filter Books
            {activeCount > 0 && (
              <span className="ml-2 inline-flex items-center justify-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800">
                {activeCount}
              </span>
            )}
          </h2>
          <Button 
            size="sm" 
            className="text-gray-500 hover:text-gray-700"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            <Ghost className="mr-1 h-4 w-4" />
            {isExpanded ? 'Less options' : 'More options'}
          </Button>
        </div>
        
        {/* Quick filters */}
        <div className="mb-4">
          <div className="flex flex-wrap gap-2">
            {statusChips.map(chip => (
              <button
                key={chip.value}
                onClick={() => handleQuickFilterClick(chip.name, chip.value)}
                className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium border transition-colors ${
                  filters[chip.name] === chip.value
                    ? `${chip.color} ring-1 ring-offset-1`
                    : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'
                }`}
              >
                {chip.label}
                {filters[chip.name] === chip.value && (
                  <X className="ml-1 h-3 w-3" />
                )}
              </button>
            ))}
          </div>
        </div>
        
        <form onSubmit={handleSubmit}>
          <div className="flex flex-col sm:flex-row gap-3 mb-4">
            <div className="relative flex-grow">
            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
    <Search className="h-4 w-4 text-gray-400" />
  </div>
  <input
    type="text"
    name="title"
    placeholder="Search by title or author..."
    value={filters.title}
    onChange={handleInputChange}
    onKeyDown={(e) => {
      if (e.key === 'Enter') {
        handleSubmit(e);
      }
    }}
    className="block w-full rounded-md border-0 py-2 pl-10 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm"
  />
            </div>
            
            <div className="flex gap-2">
              <Button type="submit" className="whitespace-nowrap">
                Apply Filters
              </Button>
              {activeCount > 0 && (
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleReset}
                  className="whitespace-nowrap"
                >
                  Clear All
                </Button>
              )}
            </div>
          </div>
          
          <AnimatePresence>
            {isExpanded && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="overflow-hidden"
              >
                <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4 pt-4 border-t border-gray-200">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Location
                    </label>
                    <Select
                      id="location"
                      name="location"
                      value={filters.location}
                      onChange={handleInputChange}
                      options={[
                        { value: '', label: 'All Locations' },
                        ...popularLocations.map(loc => ({ value: loc.value, label: loc.label }))
                      ]}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Genre
                    </label>
                    <Select
                      id="genre"
                      name="genre"
                      value={filters.genre}
                      onChange={handleInputChange}
                      options={[
                        { value: '', label: 'All Genres' },
                        ...bookGenres.map(genre => ({ value: genre, label: genre }))
                      ]}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Status
                    </label>
                    <Select
                      id="status"
                      name="status"
                      value={filters.status}
                      onChange={handleInputChange}
                      options={[
                        { value: '', label: 'All Statuses' },
                        ...bookStatuses,
                      ]}
                    />
                  </div>
                </div>
                
                {/* Popular genres */}
                <div className="mt-5">
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Popular Genres</h3>
                  <div className="flex flex-wrap gap-2">
                    {genreChips.map(chip => (
                      <button
                        key={chip.value}
                        type="button"
                        onClick={() => handleQuickFilterClick(chip.name, chip.value)}
                        className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium border transition-colors ${
                          filters[chip.name] === chip.value
                            ? `${chip.color} ring-1 ring-offset-1`
                            : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'
                        }`}
                      >
                        {chip.label}
                      </button>
                    ))}
                  </div>
                </div>
                
                {/* Popular locations */}
                <div className="mt-4">
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Popular Locations</h3>
                  <div className="flex flex-wrap gap-2">
                    {popularLocations.map(loc => (
                      <button
                        key={loc.value}
                        type="button"
                        onClick={() => handleQuickFilterClick(loc.name, loc.value)}
                        className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium border transition-colors ${
                          filters[loc.name] === loc.value
                            ? 'bg-blue-50 text-blue-700 border-blue-200 ring-1 ring-offset-1'
                            : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'
                        }`}
                      >
                        {loc.label}
                      </button>
                    ))}
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </form>
      </div>
      
      {/* Active filters */}
      {activeCount > 0 && (
        <div className="bg-gray-50 px-4 py-3 sm:px-6 border-t border-gray-200">
          <div className="flex items-center flex-wrap gap-2">
            <span className="text-xs font-medium text-gray-700">Active filters:</span>
            {Object.entries(filters).map(([key, value]) => {
              if (!value) return null;
              return (
                <span 
                  key={key} 
                  className="inline-flex items-center rounded-full bg-blue-50 px-2.5 py-0.5 text-xs font-medium text-blue-700"
                >
                  {key}: {value}
                  <button 
                    type="button"
                    onClick={() => {
                      const newFilters = { ...filters, [key]: '' };
                      setFilters(newFilters);
                      onFilterChange(newFilters);
                    }}
                    className="ml-1 flex-shrink-0 text-blue-700 hover:text-blue-900"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </span>
              );
            })}
            <button
              type="button"
              onClick={handleReset}
              className="text-xs font-medium text-gray-500 hover:text-gray-700"
            >
              Clear all
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/books/BookForm.tsx
================
'use client';

import { useState, useEffect, useRef, useCallback, memo } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import toast from 'react-hot-toast';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import Select from '@/components/ui/Select';
import { BookFormData } from '@/types';
import { Upload, X, Check } from 'lucide-react';

// Moved outside component to prevent recreation on each render
export const bookConditions = [
  { value: 'new', label: 'New' },
  { value: 'like-new', label: 'Like New' },
  { value: 'good', label: 'Good' },
  { value: 'fair', label: 'Fair' },
  { value: 'poor', label: 'Poor' }
];

// Memoized image preview component
const ImagePreview = memo(({ 
  coverImage, 
  onRemove, 
  onClick 
}: { 
  coverImage: string; 
  onRemove: () => void; 
  onClick: () => void;
}) => (
  <div className={`relative rounded-lg overflow-hidden border-2 border-blue-500`}>
    <div className="relative aspect-[2/3] w-full">
      <Image 
        src={coverImage} 
        alt="Book cover preview" 
        fill
        className="object-cover"
        unoptimized 
      />
      <button
        type="button"
        onClick={onRemove}
        className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition-colors"
      >
        <X className="h-4 w-4" />
      </button>
      <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-2">
        <span className="text-white text-xs font-medium">Cover Image</span>
      </div>
    </div>
  </div>
));

ImagePreview.displayName = 'ImagePreview';

// Memoized upload placeholder component
const UploadPlaceholder = memo(({ onClick }: { onClick: () => void }) => (
  <div 
    onClick={onClick} 
    className="aspect-[2/3] w-full flex flex-col items-center justify-center p-4 cursor-pointer hover:bg-gray-50 transition-colors border-2 border-dashed border-gray-300 rounded-lg"
  >
    <Upload className="h-8 w-8 text-gray-400 mb-2" />
    <p className="text-sm text-gray-500 text-center">Click to upload a cover image</p>
    <p className="text-xs text-gray-400 mt-1">JPEG, PNG or GIF (max 5MB)</p>
  </div>
));

UploadPlaceholder.displayName = 'UploadPlaceholder';

// Tips component
const ImageTips = memo(() => (
  <div className="bg-blue-50 rounded-lg p-4 border border-blue-100">
    <h3 className="text-sm font-medium text-blue-800 mb-2">Tips for a great book cover:</h3>
    <ul className="text-xs text-blue-700 space-y-1">
      <li className="flex items-start">
        <Check className="h-3 w-3 text-blue-500 mt-0.5 mr-1 flex-shrink-0" />
        Use a clear, well-lit image of the book
      </li>
      <li className="flex items-start">
        <Check className="h-3 w-3 text-blue-500 mt-0.5 mr-1 flex-shrink-0" />
        Ensure the title and author are visible
      </li>
      <li className="flex items-start">
        <Check className="h-3 w-3 text-blue-500 mt-0.5 mr-1 flex-shrink-0" />
        A portrait (vertical) orientation works best
      </li>
      <li className="flex items-start">
        <Check className="h-3 w-3 text-blue-500 mt-0.5 mr-1 flex-shrink-0" />
        Books with covers get more attention
      </li>
    </ul>
  </div>
));

ImageTips.displayName = 'ImageTips';

interface BookFormProps {
  initialData?: Partial<BookFormData>;
  isEditing?: boolean;
  bookId?: string;
}

export default function BookForm({ 
  initialData = {}, 
  isEditing = false,
  bookId
}: BookFormProps) {
  const router = useRouter();
  const [formData, setFormData] = useState<BookFormData>({
    title: initialData.title || '',
    author: initialData.author || '',
    genre: initialData.genre || '',
    description: initialData.description || '',
    location: initialData.location || '',
    contactInfo: initialData.contactInfo || '',
    condition: initialData.condition || 'good',
  });
  
  const [coverImage, setCoverImage] = useState<string>(initialData.coverImage || '');
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Function to read file as data URL - memoized
  const readFileAsDataURL = useCallback((file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }, []);

  // Handle file selection - memoized
  const handleFileInput = useCallback(async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      try {
        // Validate file type
        if (!file.type.startsWith('image/')) {
          toast.error('Please upload an image file');
          return;
        }
        
        // Validate file size (limit to 5MB)
        if (file.size > 5 * 1024 * 1024) {
          toast.error('Image size must be less than 5MB');
          return;
        }
        
        // Convert file to data URL
        const dataUrl = await readFileAsDataURL(file);
        setCoverImage(dataUrl);
        toast.success('Cover image uploaded successfully!');
      } catch (error) {
        console.error('Error reading file:', error);
        toast.error('Failed to upload image. Please try again.');
      }
    }
  }, [readFileAsDataURL]);

  // Remove uploaded image - memoized
  const removeImage = useCallback(() => {
    setCoverImage('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }, []);
  
  // Handle form field changes - memoized
  const handleChange = useCallback((
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    
    // Clear error on change
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: '' }));
    }
  }, [errors]);
  
  // Form validation - memoized
  const validateForm = useCallback(() => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.author) newErrors.author = 'Author is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (!formData.contactInfo) newErrors.contactInfo = 'Contact information is required';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);
  
  // Handle form submission - memoized
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      setLoading(true);
      
      // Create the endpoint based on whether we're editing or creating
      const endpoint = isEditing 
        ? `/api/books/${bookId}` 
        : '/api/books';
      
      const method = isEditing ? 'PUT' : 'POST';
      
      // Include coverImage in the data to be submitted
      const dataToSubmit = {
        ...formData,
        coverImage: coverImage || undefined,
      };
      
      const response = await fetch(endpoint, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSubmit),
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to save book');
      }
      
      const book = await response.json();
      
      toast.success(
        isEditing 
          ? 'Book updated successfully!' 
          : 'Book added successfully!'
      );
      
      // Redirect to book page or dashboard
      router.push(isEditing 
        ? `/books/${book.id}` 
        : '/dashboard/owner/books'
      );
      router.refresh();
    } catch (error) {
      console.error('Error saving book:', error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Failed to save book. Please try again.'
      );
    } finally {
      setLoading(false);
    }
  }, [validateForm, isEditing, bookId, formData, coverImage, router]);
  
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Input
        label="Title"
        id="title"
        name="title"
        value={formData.title}
        onChange={handleChange}
        error={errors.title}
        required
      />
      
      <Input
        label="Author"
        id="author"
        name="author"
        value={formData.author}
        onChange={handleChange}
        error={errors.author}
        required
      />
      
      <Input
        label="Genre (Optional)"
        id="genre"
        name="genre"
        value={formData.genre}
        onChange={handleChange}
      />
      
      <div className="space-y-1">
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Description (Optional)
        </label>
        <textarea
          id="description"
          name="description"
          rows={3}
          value={formData.description}
          onChange={handleChange}
          className="block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
        />
      </div>
      
      <Input
        label="Location"
        id="location"
        name="location"
        value={formData.location}
        onChange={handleChange}
        error={errors.location}
        required
        placeholder="City, State"
      />
      
      <Input
        label="Contact Information"
        id="contactInfo"
        name="contactInfo"
        value={formData.contactInfo}
        onChange={handleChange}
        error={errors.contactInfo}
        required
        placeholder="Email or Phone Number"
      />
      
      <Select
        label="Condition"
        id="condition"
        name="condition"
        value={formData.condition}
        onChange={handleChange}
        options={bookConditions}
      />
      
      {/* Book Cover Image Upload */}
      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-700">
          Book Cover Image (Optional)
        </label>
        
        <div className="grid md:grid-cols-2 gap-4">
          {/* Image Preview */}
          <div className="relative rounded-lg overflow-hidden border-2 border-dashed border-gray-300">
            {coverImage ? (
              <ImagePreview 
                coverImage={coverImage} 
                onRemove={removeImage} 
                onClick={() => fileInputRef.current?.click()} 
              />
            ) : (
              <UploadPlaceholder onClick={() => fileInputRef.current?.click()} />
            )}
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileInput}
              accept="image/*"
              className="hidden"
            />
          </div>
          
          {/* Upload Instructions & Tips */}
          <div className="space-y-3">
            <ImageTips />
            
            <button
              type="button"
              onClick={() => fileInputRef.current?.click()}
              className="w-full py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <Upload className="h-4 w-4 inline mr-2" />
              {coverImage ? 'Change Image' : 'Upload Image'}
            </button>
          </div>
        </div>
      </div>
      
      <div className="flex space-x-4 pt-4">
        <Button 
          type="submit" 
          loading={loading} 
          fullWidth
        >
          {isEditing ? 'Update Book' : 'Add Book'}
        </Button>
        
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          fullWidth
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}

================
File: src/components/books/BookList.tsx
================
'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { BookWithOwner } from '@/types';
import BookCard from './BookCard';
import BookListSkeleton from './BookListSkeleton';
import BookFilter from './BookFilter';
import Spinner from '@/components/ui/Spinner';
import { Edit, Trash2, ChevronLeft, ChevronRight } from 'lucide-react';
import Button from '@/components/ui/Button';
import NavLink from '@/components/ui/NavLink';
import toast from 'react-hot-toast';
import { cn } from '@/lib/utils';

interface BookListProps {
  initialBooks?: BookWithOwner[];
  showOwnerActions?: boolean;
  showFilters?: boolean;
  ownerId?: string;
  className?: string;
}

// Optimized BookActions component
const BookActions = ({ 
  book,
  onStatusChange,
  onDelete
}: { 
  book: BookWithOwner;
  onStatusChange: (id: string, status: string) => void;
  onDelete: (id: string) => void;
}) => (
  <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
    <select
      value={book.status}
      onChange={(e) => onStatusChange(book.id, e.target.value)}
      className="w-full sm:w-auto rounded-md border border-gray-300 bg-white px-3 py-2 text-sm shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
    >
      <option value="available">Available</option>
      <option value="rented">Rented</option>
      <option value="exchanged">Exchanged</option>
    </select>
    <div className="flex space-x-2">
      <NavLink href={`/dashboard/owner/books/edit/${book.id}`}>
        <Button variant="secondary" size="sm" className="w-full sm:w-auto">
          <Edit className="mr-2 h-4 w-4" />
          Edit
        </Button>
      </NavLink>
      <Button
        variant="danger"
        size="sm"
        onClick={() => onDelete(book.id)}
        className="w-full sm:w-auto"
      >
        <Trash2 className="mr-2 h-4 w-4" />
        Delete
      </Button>
    </div>
  </div>
);

// Empty state component
const EmptyBookList = ({ showOwnerActions, filters }: { 
  showOwnerActions: boolean;
  filters: any;
}) => (
  <div className="py-16 text-center bg-gray-50 rounded-xl border border-gray-200">
    <div className="mx-auto h-12 w-12 text-gray-400">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
      </svg>
    </div>
    <h3 className="mt-4 text-lg font-medium text-gray-900">No books found</h3>
    <p className="mt-2 text-gray-500 max-w-md mx-auto">
      {Object.values(filters).some(v => v) 
        ? "Try adjusting your filters to see more results" 
        : "There are no books available at the moment"}
    </p>
    {showOwnerActions && (
      <div className="mt-6">
        <NavLink href="/dashboard/owner/books/new">
          <Button variant="primary" className="rounded-full px-6">
            Add Your First Book
          </Button>
        </NavLink>
      </div>
    )}
  </div>
);

// Simplified pagination component
const Pagination = ({ 
  currentPage, 
  totalPages, 
  onPageChange 
}: { 
  currentPage: number; 
  totalPages: number; 
  onPageChange: (page: number) => void;
}) => {
  if (totalPages <= 1) return null;
  
  return (
    <div className="mt-10 flex justify-center">
      <nav className="flex items-center space-x-2" aria-label="Pagination">
        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="rounded-full"
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>
        
        <div className="flex items-center space-x-2">
          {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
            // Show first 2 pages, current page, and last 2 pages
            let pageNum;
            if (totalPages <= 5) {
              pageNum = i + 1;
            } else if (currentPage <= 3) {
              pageNum = i + 1;
            } else if (currentPage >= totalPages - 2) {
              pageNum = totalPages - 4 + i;
            } else {
              pageNum = currentPage - 2 + i;
            }
            
            return (
              <button
                key={pageNum}
                onClick={() => onPageChange(pageNum)}
                className={`inline-flex h-8 w-8 items-center justify-center rounded-full text-sm font-medium transition-colors
                  ${currentPage === pageNum
                    ? 'bg-blue-600 text-white shadow-sm'
                    : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'
                  }`}
              >
                {pageNum}
              </button>
            );
          })}
        </div>
        
        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="rounded-full"
        >
          <ChevronRight className="h-4 w-4" />
        </Button>
      </nav>
    </div>
  );
};

export default function BookList({
  initialBooks = [],
  showOwnerActions = false,
  showFilters = true,
  ownerId,
  className = '',
}: BookListProps) {
  const [books, setBooks] = useState<BookWithOwner[]>(initialBooks);
  const [loading, setLoading] = useState(initialBooks.length === 0);
  const [filtering, setFiltering] = useState(false);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filterOpen, setFilterOpen] = useState(false);
  const [filters, setFilters] = useState({
    title: '',
    location: '',
    genre: '',
    status: '',
  });
  
  const abortControllerRef = useRef<AbortController | null>(null);

  // Simplified fetchBooks function
  const fetchBooks = useCallback(async (pageNum = 1) => {
    // Cancel previous request if exists
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    
    // Set loading state
    setFiltering(true);
    
    // Create new abort controller
    const controller = new AbortController();
    abortControllerRef.current = controller;
    
    try {
      // Build query parameters efficiently
      const params = new URLSearchParams({
        page: pageNum.toString(),
        limit: '12'
      });
      
      // Only add non-empty filters
      if (ownerId) params.append('ownerId', ownerId);
      if (filters.title) params.append('title', filters.title);
      if (filters.location) params.append('location', filters.location);
      if (filters.genre) params.append('genre', filters.genre);
      if (filters.status) params.append('status', filters.status);
      
      // Fetch data
      const response = await fetch(`/api/books?${params.toString()}`, {
        signal: controller.signal
      });
      
      // Handle errors
      if (!response.ok) {
        throw new Error('Failed to fetch books');
      }
      
      // Parse response
      const data = await response.json();
      
      // Update state with response data
      if (data.books && Array.isArray(data.books)) {
        setBooks(data.books);
        setTotalPages(data.pagination?.totalPages || 1);
      } else if (Array.isArray(data)) {
        setBooks(data);
        setTotalPages(1);
      }
    } catch (error) {
      // Only report non-abort errors
      if (!(error instanceof DOMException && error.name === 'AbortError')) {
        console.error('Error fetching books:', error);
        toast.error('Failed to fetch books');
      }
    } finally {
      // Reset loading states
      setFiltering(false);
      setLoading(false);
    }
  }, [filters, ownerId]);

  // Initial fetch if no initial books provided
  useEffect(() => {
    if (initialBooks.length === 0) {
      fetchBooks();
    }
  }, [fetchBooks, initialBooks.length]);

  // Handle filter changes
  const handleFilterChange = useCallback((newFilters: typeof filters) => {
    setFilters(newFilters);
    setPage(1);
    fetchBooks(1);
    setFilterOpen(false);
  }, [fetchBooks]);

  // Handle page changes
  const handlePageChange = useCallback((newPage: number) => {
    setPage(newPage);
    fetchBooks(newPage);
    // Scroll to top when changing pages
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, [fetchBooks]);

  // Handle book deletion
  const handleDeleteBook = useCallback(async (id: string) => {
    if (!confirm('Are you sure you want to delete this book?')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/books/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete book');
      }
      
      // Remove book from state
      setBooks((prev) => prev.filter((book) => book.id !== id));
      toast.success('Book deleted successfully');
    } catch (error) {
      console.error('Error deleting book:', error);
      toast.error('Failed to delete book');
    }
  }, []);

  // Handle book status change
  const handleStatusChange = useCallback(async (id: string, status: string) => {
    try {
      const response = await fetch(`/api/books/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update book status');
      }
      
      // Update book in state
      setBooks((prev) =>
        prev.map((book) =>
          book.id === id ? { ...book, status } : book
        )
      );
      
      toast.success('Book status updated');
    } catch (error) {
      console.error('Error updating book status:', error);
      toast.error('Failed to update book status');
    }
  }, []);

  return (
    <div className={className}>
      {showFilters && (
        <>
          <div className="md:hidden mb-4">
            <Button 
              onClick={() => setFilterOpen(!filterOpen)} 
              variant="outline" 
              className="w-full flex justify-between items-center"
            >
              <span>Filters {Object.values(filters).some(v => v) ? '(Active)' : ''}</span>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-4 w-4 transition-transform ${filterOpen ? 'rotate-90' : ''}`} 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </Button>
          </div>
          
          <div
            className={cn(
              "md:block transition-all duration-300 overflow-hidden",
              filterOpen ? "max-h-[1000px] opacity-100" : "md:opacity-100 max-h-0 md:max-h-none opacity-0"
            )}
          >
            <div className="mb-6">
              <BookFilter onFilterChange={handleFilterChange} activeFilters={filters} />
            </div>
          </div>
        </>
      )}
      
      {(loading || filtering) ? (
        <BookListSkeleton />
      ) : books.length === 0 ? (
        <EmptyBookList showOwnerActions={showOwnerActions} filters={filters} />
      ) : (
        <>
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            {books.map((book) => (
              <BookCard
                key={book.id}
                book={book}
                featured={book.id === books[0]?.id}
                actions={
                  showOwnerActions ? (
                    <BookActions 
                      book={book} 
                      onStatusChange={handleStatusChange} 
                      onDelete={handleDeleteBook}
                    />
                  ) : undefined
                }
              />
            ))}
          </div>
          
          <Pagination 
            currentPage={page} 
            totalPages={totalPages} 
            onPageChange={handlePageChange}
          />
        </>
      )}
    </div>
  );
}

================
File: src/components/books/BookListSkeleton.tsx
================
import { Skeleton } from "@/components/ui/skeleton"
import Card from "../ui/Card"

export default function BookListSkeleton() {
  return (
    <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {Array.from({ length: 8 }).map((_, i) => (
        <Card
          key={i}
          className="overflow-hidden border border-gray-100 bg-white/50 backdrop-blur-sm hover:shadow-lg transition-all duration-300"
        >
          <div className="relative aspect-[3/4] w-full bg-gray-100">
            <Skeleton className="h-full w-full" />
          </div>
          <Card className="p-4">
            <Skeleton className="h-6 w-3/4 mb-2" />
            <Skeleton className="h-4 w-1/2 mb-4" />
            <div className="flex justify-between items-center">
              <Skeleton className="h-5 w-1/3" />
              <Skeleton className="h-8 w-8 rounded-full" />
            </div>
          </Card>
        </Card>
      ))}
    </div>
  )
}

================
File: src/components/layout/DashboardLayout.tsx
================
'use client';

import { ReactNode, useState, useEffect, memo, useCallback } from 'react';
import { usePathname } from 'next/navigation';
import { 
  BookText, Library, PlusCircle, List, Search, User, 
  ChevronLeft, ChevronRight, LogOut, Home 
} from 'lucide-react';
import { useUser, useClerk } from '@clerk/nextjs';
import Container from '@/components/ui/Container';
import { motion } from 'framer-motion';
import Avatar from '@/components/ui/Avatar';
import { useRouter } from 'next/navigation';
import NavLink from '../ui/NavLink';
import { useLoading } from '@/components/LoadingProvider';

// Memoize navigation link to prevent unnecessary rendering
const NavItem = memo(({ href, icon: Icon, label, isActive, collapsed, onClick }: {
  href: string;
  icon: any;
  label: string;
  isActive: boolean;
  collapsed: boolean;
  onClick?: () => void;
}) => (
  <NavLink
    href={href}
    className={`mb-1 flex items-center rounded-md px-4 py-2 text-sm font-medium transition-colors duration-200 ${
      isActive
        ? 'bg-blue-50 text-blue-700'
        : 'text-gray-600 hover:bg-gray-100'
    }`}
    onClick={onClick}
    prefetch={true}
  >
    <Icon className={`h-5 w-5 ${collapsed ? 'mx-auto' : 'mr-3'}`} />
    {!collapsed && <span>{label}</span>}
  </NavLink>
));

NavItem.displayName = 'NavItem';

// Memoize user profile section to prevent unnecessary rendering
const UserProfile = memo(({ user, userRole, collapsed }: {
  user: any;
  userRole: string;
  collapsed: boolean;
}) => (
  <div className="absolute bottom-0 left-0 right-0 border-t border-gray-200 bg-gray-50 p-4">
    {collapsed ? (
      <div className="flex justify-center">
        <Avatar
          name={user?.fullName || user?.username || ''}
          src={user?.imageUrl}
          size="sm"
        />
      </div>
    ) : (
      <div className="flex items-center">
        <Avatar
          name={user?.fullName || user?.username || ''}
          src={user?.imageUrl}
        />
        <div className="ml-3 overflow-hidden">
          <p className="truncate text-sm font-medium text-gray-900">
            {user?.fullName || user?.username}
          </p>
          <p className="truncate text-xs text-gray-500">
            {userRole === 'owner' ? 'Book Owner' : 'Book Seeker'}
          </p>
        </div>
      </div>
    )}
  </div>
));

UserProfile.displayName = 'UserProfile';

interface DashboardLayoutProps {
  children: ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const pathname = usePathname();
  const { user, isLoaded } = useUser();
  const { signOut } = useClerk();
  const router = useRouter();
  const [collapsed, setCollapsed] = useState(false);
  const { startLoading, stopLoading } = useLoading();
  
  // Get user role from metadata
  const userRole = user?.publicMetadata?.role as string || 'unknown';
  
  // Check if on mobile - only calculate on mount or window resize
  const [isMobile, setIsMobile] = useState(false);
  
  useEffect(() => {
    const checkIfMobile = () => {
      const newIsMobile = window.innerWidth < 1024;
      setIsMobile(newIsMobile);
      // On mobile, sidebar should be collapsed by default
      if (newIsMobile !== isMobile) {
        setCollapsed(newIsMobile);
      }
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    
    return () => window.removeEventListener('resize', checkIfMobile);
  }, [isMobile]);
  
  // Memoized sign out handler to prevent recreation
  const handleSignOut = useCallback(async () => {
    try {
      startLoading();
      await signOut();
      router.push('/');
    } finally {
      stopLoading();
    }
  }, [signOut, router, startLoading, stopLoading]);

  // Define navigation links once
  const ownerLinks = [
    {
      href: '/dashboard/owner',
      label: 'Dashboard',
      icon: Home,
    },
    {
      href: '/dashboard/owner/books',
      label: 'My Books',
      icon: List,
    },
    {
      href: '/dashboard/owner/books/new',
      label: 'Add Book',
      icon: PlusCircle,
    },
    {
      href: '/dashboard/profile',
      label: 'Profile',
      icon: User,
    },
  ];
  
  const seekerLinks = [
    {
      href: '/dashboard/seeker',
      label: 'Dashboard',
      icon: Search,
    },
    {
      href: '/dashboard/profile',
      label: 'Profile',
      icon: User,
    },
  ];
  
  // Select links based on user role
  const links = userRole === 'owner' ? ownerLinks : seekerLinks;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex">
        {/* Sidebar */}
        <motion.div
          animate={{ width: collapsed ? '72px' : (isMobile ? '100%' : '240px') }}
          transition={{ duration: 0.2 }}
          className={`fixed inset-y-0 left-0 z-20 bg-white shadow-lg lg:block ${isMobile && collapsed ? 'hidden' : ''}`}
        >
          <div className="flex h-16 items-center justify-between px-4">
            {!collapsed && (
              <NavLink href="/" className="flex items-center group">
                <Library className="h-8 w-8 text-blue-600" />
                <span className="ml-2 text-xl font-bold">BookShare</span>
              </NavLink>
            )}
            
            {collapsed && (
              <Library className="h-8 w-8 text-blue-600 mx-auto" />
            )}
            
            <button 
              onClick={() => setCollapsed(!collapsed)}
              className="rounded-full p-1 hover:bg-gray-100"
            >
              {collapsed ? (
                <ChevronRight className="h-5 w-5 text-gray-500" />
              ) : (
                <ChevronLeft className="h-5 w-5 text-gray-500" />
              )}
            </button>
          </div>
          
          <nav className="flex flex-col p-4">
            {links.map((link) => (
              <NavItem
                key={link.href}
                href={link.href}
                icon={link.icon}
                label={link.label}
                isActive={pathname === link.href}
                collapsed={collapsed}
                onClick={isMobile ? () => setCollapsed(true) : undefined}
              />
            ))}
            
            <div className="my-4 h-px bg-gray-200" />
            
            <button
              onClick={handleSignOut}
              className={`flex items-center rounded-md px-4 py-2 text-sm font-medium text-red-500 transition-colors duration-200 hover:bg-red-50 ${collapsed ? 'justify-center' : ''}`}
            >
              <LogOut className={`h-5 w-5 ${collapsed ? 'mx-auto' : 'mr-3'}`} />
              {!collapsed && <span>Sign Out</span>}
            </button>
          </nav>
          
          {/* User profile section */}
          {isLoaded && user && (
            <UserProfile 
              user={user} 
              userRole={userRole} 
              collapsed={collapsed}
            />
          )}
        </motion.div>
        
        {/* Mobile overlay when sidebar is open */}
        {isMobile && !collapsed && (
          <div 
            className="fixed inset-0 z-10 bg-black bg-opacity-50 lg:hidden"
            onClick={() => setCollapsed(true)}
          />
        )}
        
        {/* Main content */}
        <motion.div
          animate={{ marginLeft: collapsed || isMobile ? '0px' : '240px' }}
          transition={{ duration: 0.2 }}
          className="flex flex-1 flex-col min-h-screen"
        >
          {isMobile && (
            <div className="sticky top-0 z-10 bg-white border-b border-gray-200 shadow-sm">
              <div className="flex h-16 items-center justify-between px-4">
                <div className="flex items-center">
                  <button 
                    onClick={() => setCollapsed(!collapsed)}
                    className="p-2 rounded-md text-gray-500 hover:bg-gray-100"
                  >
                    <ChevronRight className="h-6 w-6" />
                  </button>
                  <span className="ml-2 text-lg font-medium">Dashboard</span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium hidden sm:block">{user?.firstName || user?.username}</span>
                  <Avatar
                    name={user?.fullName || user?.username || ''}
                    src={user?.imageUrl}
                    size="sm"
                  />
                </div>
              </div>
            </div>
          )}
          
          <main className="flex-1 py-8">
            <Container>
              {children}
            </Container>
          </main>
        </motion.div>
      </div>
    </div>
  );
}

================
File: src/components/layout/Footer.tsx
================
'use client';

import Link from 'next/link';
import { Book, Mail, GitCommit, Twitter, Instagram } from 'lucide-react';
import { motion } from 'framer-motion';
import NavLink from '../ui/NavLink';

export default function Footer() {
  const currentYear = new Date().getFullYear();
  
  const socialLinks = [
    { icon: GitCommit, href: '#', label: 'GitHub' },
    { icon: Twitter, href: '#', label: 'Twitter' },
    { icon: Instagram, href: '#', label: 'Instagram' },
  ];
  
  const footerLinks = [
    { label: 'About', href: '#' },
    { label: 'Features', href: '#' },
    { label: 'Privacy', href: '#' },
    { label: 'Terms', href: '#' },
    { label: 'Contact', href: '#' },
  ];
  
  return (
    <motion.footer 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="bg-white border-t border-gray-200"
    >
      <div className="mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8">
        <div className="flex justify-center space-x-6 md:order-2">
          {socialLinks.map((item) => {
            const Icon = item.icon;
            return (
              <motion.a
                key={item.label}
                href={item.href}
                className="text-gray-400 hover:text-gray-500"
                whileHover={{ scale: 1.1, color: '#3B82F6' }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="sr-only">{item.label}</span>
                <Icon className="h-5 w-5" aria-hidden="true" />
              </motion.a>
            );
          })}
        </div>
        
        <div className="mt-8 md:order-1 md:mt-0">
          <div className="flex items-center justify-center md:justify-start">
            <Book className="h-6 w-6 text-blue-600 mr-2" />
            <span className="text-lg font-semibold text-gray-900">BookShare</span>
          </div>
          
          <nav className="mt-4 flex flex-wrap justify-center gap-x-6 gap-y-2">
            {footerLinks.map((link) => (
              <NavLink
                key={link.label}
                href={link.href}
                className="text-sm text-gray-500 hover:text-gray-900 transition-colors"
              >
                {link.label}
              </NavLink>
            ))}
          </nav>
          
          <p className="mt-6 text-center text-xs leading-5 text-gray-500 md:text-left">
            &copy; {currentYear} BookShare. All rights reserved.
          </p>
        </div>
      </div>
    </motion.footer>
  );
}

================
File: src/components/layout/Header.tsx
================
'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { 
  Menu, X, LogOut, User as UserIcon, 
  Home, Book, Bell, ChevronDown, 
  Search,
  BookAIcon
} from 'lucide-react';
import { useClerk, useUser } from '@clerk/nextjs';
import { motion, AnimatePresence } from 'framer-motion';
import NavLink from '../ui/NavLink';
import Button from '../ui/Button';
import { useLoading } from '@/components/LoadingProvider';
import Link from 'next/link';

// The HeaderLogo is memoized to prevent unnecessary re-renders
const HeaderLogo = () => (
  <NavLink href="/" className="flex items-center">
    <div className="relative w-10 h-10 flex items-center justify-center">
      <div className="absolute inset-0 rounded-lg bg-gradient-to-br from-blue-500 to-indigo-600"></div>
      <svg 
        className="relative z-10 text-white w-6 h-6"
        viewBox="0 0 24 24" 
        fill="none" 
        xmlns="http://www.w3.org/2000/svg"
      >
        <path 
          d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round"
        />
      </svg>
    </div>
    <span className="ml-2.5 text-xl font-bold text-gray-900 tracking-tight">BookShare</span>
  </NavLink>
);

// Notification icon
const NotificationsIcon = ({ count }: { count: number }) => (
  <div className="relative">
    <button className="rounded-full p-2 text-gray-500 hover:bg-gray-100 focus:outline-none">
      <Bell className="h-5 w-5" />
      {count > 0 && (
        <span className="absolute -right-0.5 -top-0.5 flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-[10px] font-bold text-white">
          {count}
        </span>
      )}
    </button>
  </div>
);

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [notifications] = useState(3); // Example notification count
  const { signOut } = useClerk();
  const { user, isSignedIn, isLoaded } = useUser();
  const router = useRouter();
  const pathname = usePathname();
  const profileRef = useRef<HTMLDivElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);
  const { startLoading } = useLoading();

  // Get user role from metadata
  const userRole = user?.unsafeMetadata?.role as string;

  const getDashboardLink = () => {
    if (!userRole) return '/auth/role-selection';
    return userRole === 'owner' ? '/dashboard/owner' : '/dashboard/seeker';
  };

  const handleSignOut = async () => {
    setIsProfileOpen(false);
    startLoading();
    await signOut();
    router.push('/');
  };

  const handleNavigation = (href: string) => {
    setIsMenuOpen(false);
    startLoading();
    router.push(href);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isProfileOpen && 
        profileRef.current && 
        !profileRef.current.contains(event.target as Node)
      ) {
        setIsProfileOpen(false);
      }
      
      if (
        isSearchOpen && 
        searchInputRef.current && 
        event.target !== searchInputRef.current && 
        !(event.target instanceof Element && event.target.closest('.search-container'))
      ) {
        setIsSearchOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isProfileOpen, isSearchOpen]);

  // Focus search input when opened
  useEffect(() => {
    if (isSearchOpen && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [isSearchOpen]);

  // Close mobile menu when route changes
  useEffect(() => {
    setIsMenuOpen(false);
  }, [pathname]);

  return (
    <header className="sticky top-0 z-10 bg-white/90 backdrop-blur-md border-b border-gray-200 shadow-sm">
      <div className="mx-auto justify-center items-center max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          {/* Logo */}
          <HeaderLogo />

          {/* Navigation */}
          <div className="hidden items-center ml-28 md:flex justify-center space-x-4">
            <div className="flex items-center space-x-1">
              {/* Fixed: Added newTab={true} to open in a new tab */}
              <Button href="/books"     variant="secondary"
    className="mx-3 px-3 py-2 flex items-center rounded-full transition-all duration-300 bg-blue-100 hover:bg-blue-200 hover:text-blue-700 hover:shadow-sm"
    newTab={true}>
      <BookAIcon className="mr-1.5 h-4 w-4" />
                Browse Books
              </Button>
              
              {isSignedIn && isLoaded && (
  <Button
    variant="outline"
    onClick={() => window.open(getDashboardLink(), '_blank')}
    className="mx-3 px-3 py-2 flex items-center rounded-full transition-all duration-300 hover:bg-blue-50 hover:text-blue-700 hover:shadow-sm"
  >
    <Home className="mr-1.5 h-4 w-4" />
    <span className="font-medium">Dashboard</span>
  </Button>
)}
            </div>
          </div>

          {/* Right Section */}
          <div className="flex items-center space-x-3">
            {/* Search Button */}
            <button
              onClick={() => setIsSearchOpen(!isSearchOpen)}
              className="relative rounded-full p-2 text-gray-500 hover:bg-gray-100 focus:outline-none"
            >
              <Search className="h-5 w-5" />
            </button>

            {/* Search Input (expandable) */}
            <AnimatePresence>
              {isSearchOpen && (
                <motion.div
                  initial={{ width: 0, opacity: 0 }}
                  animate={{ width: 240, opacity: 1 }}
                  exit={{ width: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="absolute right-20 top-1/2 -translate-y-1/2 search-container"
                >
                  <input
                    ref={searchInputRef}
                    type="text"
                    placeholder="Search books..."
                    className="w-full rounded-full border border-gray-300 bg-white py-2 pl-4 pr-10 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
                  />
                  <Search className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
                </motion.div>
              )}
            </AnimatePresence>

            {/* Notifications */}
            {isSignedIn && <NotificationsIcon count={notifications} />}

            {/* Role indicator */}
            {isSignedIn && isLoaded && userRole && (
              <div className="hidden md:block">
                <div className={`rounded-full px-4 py-1.5 ${
                  userRole === 'owner' 
                    ? 'bg-indigo-50 text-indigo-700 border border-indigo-200' 
                    : 'bg-green-50 text-green-700 border border-green-200'
                }`}>
                  <div className="flex items-center justify-center">
                    <UserIcon className="mr-1.5 h-3.5 w-3.5" />
                    <span className="text-sm font-medium">Book {userRole === 'owner' ? 'Owner' : 'Seeker'}</span>
                  </div>
                </div>
              </div>
            )}
            
            {/* Profile */}
            <div className="relative profile-menu mt-1" ref={profileRef}>
              {isSignedIn ? (
                <div>
                  <button
                    onClick={() => setIsProfileOpen(!isProfileOpen)}
                    className="flex items-center space-x-2 rounded-full border border-gray-200 bg-white p-1.5 pl-2 pr-3 shadow-sm hover:shadow transition-all duration-200"
                  >
                    <div className="h-8 w-8 overflow-hidden rounded-full ring-2 ring-white">
                      {user?.imageUrl ? (
                        <img src={user.imageUrl} alt="Profile" className="h-full w-full object-cover" />
                      ) : (
                        <div className="flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-500 to-indigo-600 text-white">
                          {(user?.firstName?.[0] || user?.username?.[0] || 'U').toUpperCase()}
                        </div>
                      )}
                    </div>
                    <span className="hidden text-sm font-medium text-gray-700 md:block">
                      {user?.firstName || user?.username?.split('@')[0]}
                    </span>
                    <ChevronDown className="h-4 w-4 text-gray-500" style={{ transform: isProfileOpen ? 'rotate(180deg)' : 'none' }} />
                  </button>

                  <AnimatePresence>
                    {isProfileOpen && (
                      <motion.div
                        initial={{ opacity: 0, y: 10, scale: 0.95 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: 10, scale: 0.95 }}
                        transition={{ duration: 0.2 }}
                        className="absolute right-0 mt-2 w-64 origin-top-right rounded-xl bg-white p-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none overflow-hidden"
                      >
                        <div className="relative border-b border-gray-100 p-4">
                          <div className="absolute top-0 right-0 left-0 h-0.5 bg-gradient-to-r from-blue-500 to-indigo-600"></div>
                          <div className="flex items-center">
                            <div className="h-12 w-12 overflow-hidden rounded-full ring-2 ring-white shadow-md">
                              {user?.imageUrl ? (
                                <img src={user.imageUrl} alt="Profile" className="h-full w-full object-cover" />
                              ) : (
                                <div className="flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-500 to-indigo-600 text-white">
                                  {(user?.firstName?.[0] || user?.username?.[0] || 'U').toUpperCase()}
                                </div>
                              )}
                            </div>
                            <div className="ml-3">
                              <p className="text-sm font-medium text-gray-900">
                                {user?.fullName || user?.username}
                              </p>
                              <p className="truncate text-xs text-gray-500">
                                {user?.primaryEmailAddress?.emailAddress}
                              </p>
                              {userRole && (
                                <div className="mt-1">
                                  <span className={`inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium
                                    ${userRole === 'owner' 
                                      ? 'bg-indigo-100 text-indigo-800' 
                                      : 'bg-green-100 text-green-800'}`}
                                  >
                                    <UserIcon className="mr-1 h-3 w-3" />
                                    Book {userRole === 'owner' ? 'Owner' : 'Seeker'}
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="p-1 mt-2">
                        {isSignedIn && isLoaded && (
  <Button
    variant="outline"
    onClick={() => window.open(getDashboardLink(), '_blank')}
    className="mx-3 px-3 py-2 flex items-center rounded-full transition-all duration-300 hover:bg-blue-50 hover:text-blue-700 hover:shadow-sm"
  >
    <Home className="mr-1.5 h-4 w-4" />
    <span className="font-medium">Dashboard</span>
  </Button>
)}
                          
                          <button
                            onClick={() => handleNavigation('/dashboard/profile')}
                            className="flex w-full items-center rounded-lg px-4 py-2.5 text-sm text-gray-700 hover:bg-gray-50 transition-colors text-left"
                          >
                            <UserIcon className="mr-3 h-5 w-5 text-gray-500" />
                            Profile
                          </button>
                          
                          <div className="my-1 h-px bg-gray-100 mx-2"></div>
                          
                          <button
                            onClick={handleSignOut}
                            className="flex w-full items-center rounded-lg px-4 py-2.5 text-left text-sm text-red-600 hover:bg-red-50 transition-colors"
                          >
                            <LogOut className="mr-3 h-5 w-5" />
                            Sign out
                          </button>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              ) : (
                <div className="flex space-x-3">
                  <Button
                    variant="outline"
                    onClick={() => handleNavigation('/sign-in')}
                    className="rounded-full border border-gray-300 bg-white px-4 py-1.5 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50"
                  >
                    Sign in
                  </Button>
                  <Button
                    onClick={() => handleNavigation('/sign-up')}
                    className="rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 px-4 py-1.5 text-sm font-medium text-white shadow-sm hover:from-blue-600 hover:to-indigo-700"
                  >
                    Sign up
                  </Button>
                </div>
              )}
            </div>

            {/* Mobile menu button */}
            <div className="ml-1 md:hidden">
              <button
                type="button"
                className="inline-flex items-center justify-center rounded-full p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500"
                onClick={() => setIsMenuOpen(!isMenuOpen)}
              >
                <span className="sr-only">Open main menu</span>
                {isMenuOpen ? (
                  <X className="block h-6 w-6" aria-hidden="true" />
                ) : (
                  <Menu className="block h-6 w-6" aria-hidden="true" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <AnimatePresence>
        {isMenuOpen && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="md:hidden overflow-hidden bg-white shadow-lg"
          >
            <div className="space-y-1 px-2 pb-3 pt-2">
              {/* Fixed: Added newTab={true} to open in a new tab for mobile menu too */}
              <Button href="/books" newTab={true}>
                Browse Books
              </Button>
              
              {isSignedIn && (
                <Button
                  variant="outline"
                  onClick={() => handleNavigation(getDashboardLink())}
                  className="w-full mt-2 rounded-lg px-3 py-2 text-base font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 text-left flex items-center"
                >
                  <Home className="mr-2 h-5 w-5 text-gray-500" />
                  Dashboard
                </Button>
              )}

              {/* Mobile Search */}
              <div className="relative px-3 py-2">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search books..."
                    className="w-full rounded-lg border border-gray-300 bg-white py-2 pl-10 pr-4 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
                  />
                  <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
                </div>
              </div>
            </div>
            
            {isSignedIn && (
              <div className="border-t border-gray-200 pt-4 pb-3">
                <div className="flex items-center px-4">
                  <div className="flex-shrink-0">
                    <div className="h-10 w-10 overflow-hidden rounded-full border-2 border-gray-200 bg-gray-100">
                      {user?.imageUrl ? (
                        <img src={user.imageUrl} alt="Profile" className="h-full w-full object-cover" />
                      ) : (
                        <div className="flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-500 to-indigo-600 text-white">
                          {(user?.firstName?.[0] || user?.username?.[0] || 'U').toUpperCase()}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="ml-3">
                    <div className="text-base font-medium text-gray-800">
                      {user?.fullName || user?.username}
                    </div>
                    <div className="text-sm font-medium text-gray-500">
                      {user?.primaryEmailAddress?.emailAddress}
                    </div>
                    {userRole && (
                      <div className="mt-1">
                        <span className={`inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium
                          ${userRole === 'owner' 
                            ? 'bg-indigo-100 text-indigo-800' 
                            : 'bg-green-100 text-green-800'}`}
                        >
                          <UserIcon className="mr-1 h-3 w-3" />
                          Book {userRole === 'owner' ? 'Owner' : 'Seeker'}
                        </span>
                      </div>
                    )}
                  </div>
                  {notifications > 0 && (
                    <div className="ml-auto">
                      <span className="flex h-6 w-6 items-center justify-center rounded-full bg-red-500 text-xs font-medium text-white">
                        {notifications}
                      </span>
                    </div>
                  )}
                </div>
                <div className="mt-4 space-y-1 px-2">
                  <Button
                    variant="outline"
                    onClick={() => handleNavigation('/dashboard/profile')}
                    className="w-full rounded-lg px-3 py-2 text-base font-medium text-gray-700 hover:bg-gray-50 hover:text-gray-900 text-left flex items-center"
                  >
                    <UserIcon className="mr-2 h-5 w-5 text-gray-500" />
                    Profile
                  </Button>
                  <Button
                    variant="outline"
                    onClick={handleSignOut}
                    className="w-full rounded-lg px-3 py-2 text-left text-base font-medium text-red-600 hover:bg-red-50 flex items-center"
                  >
                    <LogOut className="mr-2 h-5 w-5" />
                    Sign out
                  </Button>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </header>
  );
}

================
File: src/components/layout/Sidebar.tsx
================
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { BookOpen, PlusCircle, List, Search, User } from 'lucide-react';
import { useUser } from '@clerk/nextjs';
import NavLink from '../ui/NavLink';

export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useUser();
  
  const userRole = user?.publicMetadata?.role as string || 'unknown';
  
  const ownerLinks = [
    {
      href: '/dashboard/owner',
      label: 'Dashboard',
      icon: BookOpen,
    },
    {
      href: '/dashboard/owner/books',
      label: 'My Books',
      icon: List,
    },
    {
      href: '/dashboard/owner/books/new',
      label: 'Add Book',
      icon: PlusCircle,
    },
  ];
  
  const seekerLinks = [
    {
      href: '/dashboard/seeker',
      label: 'Dashboard',
      icon: Search,
    },
  ];
  
  const links = userRole === 'owner' ? ownerLinks : seekerLinks;
  
  return (
    <div className="fixed inset-y-0 left-0 z-10 hidden w-64 transform bg-white shadow-lg transition duration-300 sm:block">
      <div className="flex h-16 items-center px-6">
        <NavLink href="/" className="flex items-center">
          <BookOpen className="h-8 w-8 text-blue-600" />
          <span className="ml-2 text-xl font-bold">BookShare</span>
        </NavLink>
      </div>
      
      <nav className="flex flex-col p-4">
        {links.map((link) => {
          const Icon = link.icon;
          const isActive = pathname === link.href;
          
          return (
            <NavLink
              key={link.href}
              href={link.href}
              className={`mb-1 flex items-center rounded-md px-4 py-2 text-sm font-medium ${
                isActive
                  ? 'bg-blue-50 text-blue-700'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <Icon className="mr-3 h-5 w-5" />
              {link.label}
            </NavLink>
          );
        })}
        
        <div className="my-4 h-px bg-gray-200" />
        
        <NavLink
          href="/dashboard/profile"
          className={`flex items-center rounded-md px-4 py-2 text-sm font-medium ${
            pathname === '/dashboard/profile'
              ? 'bg-blue-50 text-blue-700'
              : 'text-gray-600 hover:bg-gray-100'
          }`}
        >
          <User className="mr-3 h-5 w-5" />
          Profile
        </NavLink>
      </nav>
    </div>
  );
}

================
File: src/components/onboarding/RoleSelection.tsx
================
// src/components/onboarding/RoleSelection.tsx
'use client';

import { useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import toast from 'react-hot-toast';
import { BookOpen, Search } from 'lucide-react';
import Button from '@/components/ui/Button';
import { useUser } from '@clerk/nextjs';

// Inner component that safely uses search params
function RoleSelectionContent() {
  const searchParams = useSearchParams();
  const [role, setRole] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [debugInfo, setDebugInfo] = useState<string | null>(null);
  const router = useRouter();
  const { user, isLoaded } = useUser();
  
  const handleSubmit = async () => {
    if (!role) {
      toast.error('Please select a role');
      return;
    }
    
    if (!isLoaded || !user) {
      toast.error('User not loaded yet');
      return;
    }
    
    try {
      setLoading(true);
      setDebugInfo('Starting role update process');
      
      // Add some user debug info
      const debugUserInfo = {
        id: user.id,
        fullName: user.fullName,
        primaryEmail: user.primaryEmailAddress?.emailAddress,
      };
      
      setDebugInfo(`User info: ${JSON.stringify(debugUserInfo)}`);
      
      // First update user role in our DB
      setDebugInfo('Sending fetch request to /api/user');
      
      const response = await fetch('/api/user', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ role }),
      });
      
      const responseData = await response.json();
      setDebugInfo(`API response status: ${response.status}, data: ${JSON.stringify(responseData)}`);
      
      if (!response.ok) {
        throw new Error(responseData.error || 'Failed to update user role');
      }
      
      // Then update user role in Clerk (if DB update succeeds)
      setDebugInfo('Updating Clerk user metadata');
      
      try {
        await user.update({
          unsafeMetadata: {
            role,
          },
        });
        setDebugInfo('Clerk update successful');
      } catch (clerkError) {
        console.error('Clerk update error:', clerkError);
        setDebugInfo(`Clerk update failed: ${clerkError instanceof Error ? clerkError.message : String(clerkError)}`);
        // Continue even if Clerk update fails - we'll handle it on next login
      }
      
      toast.success('Role updated successfully!');
      setDebugInfo('Role update successful, redirecting...');
      
      // Redirect to appropriate dashboard
      router.push(role === 'owner' ? '/dashboard/owner' : '/dashboard/seeker');
    } catch (error) {
      console.error('Error updating role:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to update role. Please try again.';
      setDebugInfo(`Error: ${errorMessage}`);
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="mx-auto max-w-md py-8">
      <h1 className="text-center text-2xl font-bold text-gray-900">
        Choose Your Role
      </h1>
      <p className="mt-2 text-center text-gray-600">
        Select how you want to use the Book Exchange Portal
      </p>
      
      <div className="mt-8 grid gap-4 sm:grid-cols-2">
        <div
          className={`cursor-pointer rounded-lg border p-6 ${
            role === 'owner'
              ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-500'
              : 'border-gray-200 hover:border-blue-500 hover:bg-blue-50'
          }`}
          onClick={() => setRole('owner')}
        >
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-blue-100">
            <BookOpen className="h-6 w-6 text-blue-600" />
          </div>
          <h2 className="mt-4 text-center text-lg font-medium text-gray-900">
            Book Owner
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            List your books for others to rent or exchange
          </p>
        </div>
        
        <div
          className={`cursor-pointer rounded-lg border p-6 ${
            role === 'seeker'
              ? 'border-green-500 bg-green-50 ring-2 ring-green-500'
              : 'border-gray-200 hover:border-green-500 hover:bg-green-50'
          }`}
          onClick={() => setRole('seeker')}
        >
          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
            <Search className="h-6 w-6 text-green-600" />
          </div>
          <h2 className="mt-4 text-center text-lg font-medium text-gray-900">
            Book Seeker
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Find books to rent or exchange from other users
          </p>
        </div>
      </div>
      
      <div className="mt-8">
        <Button
          onClick={handleSubmit}
          loading={loading}
          fullWidth
          disabled={!role}
        >
          Continue
        </Button>
      </div>
      
      {debugInfo && (
        <div className="mt-6 rounded-md border border-gray-300 bg-gray-50 p-4">
          <h3 className="text-sm font-medium text-gray-700">Debug Information:</h3>
          <pre className="mt-2 overflow-auto text-xs text-gray-600">
            {debugInfo}
          </pre>
        </div>
      )}
    </div>
  );
}

// Main component that exports the role selection functionality
export default function RoleSelection() {
  // This component doesn't directly use useSearchParams, but wraps
  // the content component in its own Suspense boundary for safety
  return (
    <Suspense fallback={<div className="p-6 text-center">Loading...</div>}>
      <RoleSelectionContent />
    </Suspense>
  );
}

================
File: src/components/ui/Avatar.tsx
================
import Image from 'next/image';

interface AvatarProps {
  name: string;
  src?: string;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export default function Avatar({
  name,
  src,
  size = 'md',
  className = '',
}: AvatarProps) {
  const sizes = {
    sm: 'h-8 w-8 text-xs',
    md: 'h-10 w-10 text-sm',
    lg: 'h-12 w-12 text-base',
  };

  // Get initials from name
  const initials = name
    .split(' ')
    .map((n) => n[0])
    .join('')
    .toUpperCase()
    .slice(0, 2);

  if (src) {
    return (
      <div
        className={`relative overflow-hidden rounded-full ${sizes[size]} ${className}`}
      >
        <Image
          src={src}
          alt={name}
          fill
          className="object-cover"
        />
      </div>
    );
  }

  return (
    <div
      className={`flex items-center justify-center rounded-full bg-blue-100 text-blue-600 font-medium ${sizes[size]} ${className}`}
    >
      {initials}
    </div>
  );
}

================
File: src/components/ui/Badge.tsx
================
// src/components/ui/Badge.tsx
'use client';

import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';

interface BadgeProps {
  status: 'available' | 'rented' | 'exchanged';
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  showDot?: boolean;
  animated?: boolean;
}

export default function Badge({ 
  status, 
  className = '', 
  size = 'md',
  showDot = true,
  animated = false 
}: BadgeProps) {
  const statusClasses = {
    available: 'bg-green-100 text-green-800 border-green-200',
    rented: 'bg-blue-100 text-blue-800 border-blue-200',
    exchanged: 'bg-gray-100 text-gray-800 border-gray-200',
  };
  
  const dotColors = {
    available: 'bg-green-500',
    rented: 'bg-blue-500',
    exchanged: 'bg-gray-500',
  };
  
  const sizes = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2.5 py-0.5 text-xs',
    lg: 'px-3 py-1 text-sm',
  };
  
  const label = status.charAt(0).toUpperCase() + status.slice(1);
  
  const BadgeComponent = animated ? motion.span : 'span';
  const animationProps = animated ? {
    initial: { scale: 0.8, opacity: 0 },
    animate: { scale: 1, opacity: 1 },
    transition: { type: 'spring', stiffness: 500, damping: 30 },
  } : {};

  return (
    <BadgeComponent
      {...animationProps}
      className={cn(
        `inline-flex items-center rounded-full border ${statusClasses[status]} ${sizes[size]}`,
        className
      )}
    >
      {showDot && (
        <span className={`mr-1.5 h-1.5 w-1.5 rounded-full ${dotColors[status]}`}></span>
      )}
      {label}
    </BadgeComponent>
  );
}

================
File: src/components/ui/Button.tsx
================
"use client"

import { forwardRef } from "react"
import { cn } from "@/lib/utils"
import Link from "next/link"

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "danger" | "outline"
  size?: "sm" | "md" | "lg"
  loading?: boolean
  fullWidth?: boolean
  className?: string
  children?: React.ReactNode
  href?: string
  newTab?: boolean
}

const EnhancedButton = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    { 
      children, 
      className = "", 
      variant = "primary", 
      size = "md", 
      loading = false, 
      fullWidth = false, 
      href,
      newTab = false,
      ...props 
    },
    ref,
  ) => {
    // Base classes
    const baseClasses = cn(
      "relative inline-flex items-center justify-center font-medium transition-all duration-200",
      "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2",
      "active:scale-95 transform rounded-full",
      { "w-full": fullWidth },
      { "opacity-70 cursor-not-allowed": props.disabled },
      { "cursor-wait": loading },
    )

    // Variant classes
    const variants = {
      primary:
        "bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800 focus-visible:ring-blue-500",
      secondary:
        "bg-gray-200 text-gray-900 hover:bg-gray-300 active:bg-gray-400 focus-visible:ring-gray-400",
      danger:
        "bg-red-600 text-white hover:bg-red-700 active:bg-red-800 focus-visible:ring-red-500",
      outline:
        "border-2 border-gray-200 bg-transparent text-gray-700 hover:bg-gray-50 focus-visible:ring-gray-400 hover:border-gray-400",
    }

    // Size classes
    const sizes = {
      sm: "h-9 px-4 text-xs",
      md: "h-11 px-6 text-sm",
      lg: "h-13 px-8 text-base",
    }

    const buttonClasses = cn(
      baseClasses,
      variants[variant],
      sizes[size],
      className,
    )

    // Loading content
    const loadingSpinner = loading && (
      <div className="absolute inset-0 flex items-center justify-center bg-inherit rounded-full">
        <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z" />
        </svg>
      </div>
    )

    // Content with conditional opacity during loading
    const buttonContent = (
      <span className={cn("flex items-center justify-center gap-2", { "opacity-0": loading })}>
        {children}
      </span>
    )

    // If an href is provided, render as a link
    if (href) {
      if (newTab) {
        // External link or open in new tab
        return (
          <a
            href={href}
            className={buttonClasses}
            target="_blank"
            rel="noopener noreferrer"
            {...(props as any)}
          >
            {loadingSpinner}
            {buttonContent}
          </a>
        )
      } else {
        // Internal link using Next.js Link
        return (
          <Link
            href={href}
            className={buttonClasses}
            {...(props as any)}
          >
            {loadingSpinner}
            {buttonContent}
          </Link>
        )
      }
    }

    // Default: render as a button
    return (
      <button
        ref={ref}
        className={buttonClasses}
        disabled={loading || props.disabled}
        {...props}
      >
        {loadingSpinner}
        {buttonContent}
      </button>
    )
  },
)

EnhancedButton.displayName = "EnhancedButton"

export default EnhancedButton

================
File: src/components/ui/Card.tsx
================
import { ReactNode } from 'react';

interface CardProps {
  children: ReactNode;
  className?: string;
}

export default function Card({ children, className = '' }: CardProps) {
  return (
    <div className={`overflow-hidden rounded-lg border border-gray-200 bg-white shadow ${className}`}>
      {children}
    </div>
  );
}

interface CardHeaderProps {
  children: ReactNode;
  className?: string;
}

Card.Header = function CardHeader({ children, className = '' }: CardHeaderProps) {
  return (
    <div className={`border-b border-gray-200 bg-gray-50 px-4 py-5 sm:px-6 ${className}`}>
      {children}
    </div>
  );
};

interface CardContentProps {
  children: ReactNode;
  className?: string;
}

Card.Content = function CardContent({ children, className = '' }: CardContentProps) {
  return (
    <div className={`px-4 py-5 sm:p-6 ${className}`}>
      {children}
    </div>
  );
};

interface CardFooterProps {
  children: ReactNode;
  className?: string;
}

Card.Footer = function CardFooter({ children, className = '' }: CardFooterProps) {
  return (
    <div className={`border-t border-gray-200 bg-gray-50 px-4 py-4 sm:px-6 ${className}`}>
      {children}
    </div>
  );
};

================
File: src/components/ui/Container.tsx
================
import { ReactNode } from 'react';

interface ContainerProps {
  children: ReactNode;
  className?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
}

export default function Container({ 
  children, 
  className = '', 
  size = 'lg' 
}: ContainerProps) {
  const sizes = {
    sm: 'max-w-3xl',
    md: 'max-w-4xl',
    lg: 'max-w-6xl',
    xl: 'max-w-7xl',
    full: 'max-w-full',
  };

  return (
    <div className={`mx-auto px-4 sm:px-6 lg:px-8 ${sizes[size]} ${className}`}>
      {children}
    </div>
  );
}

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/Input.tsx
================
// src/components/ui/Input.tsx
import { forwardRef } from 'react';
import { LucideIcon } from 'lucide-react';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  icon?: LucideIcon;
}

const Input = forwardRef<HTMLInputElement, InputProps>(({
  label,
  error,
  icon: Icon,
  className = '',
  ...props
}, ref) => {
  return (
    <div className="space-y-1">
      {label && (
        <label htmlFor={props.id} className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}
      <div className="relative">
        {Icon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Icon className="h-5 w-5 text-gray-400" />
          </div>
        )}
        <input
          ref={ref}
          className={`block w-full rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm
            ${error ? 'border-red-500' : ''} 
            ${Icon ? 'pl-10' : 'px-3'} 
            py-2
            ${className}`
          }
          {...props}
        />
      </div>
      {error && (
        <p className="text-xs text-red-600">{error}</p>
      )}
    </div>
  );
});

Input.displayName = 'Input';

export default Input;

================
File: src/components/ui/Modal.tsx
================
'use client';

import { Fragment, ReactNode } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { X } from 'lucide-react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export default function Modal({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
}: ModalProps) {
  const sizes = {
    sm: 'sm:max-w-md',
    md: 'sm:max-w-lg',
    lg: 'sm:max-w-xl',
    xl: 'sm:max-w-2xl',
  };

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-10" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel
                className={`w-full transform overflow-hidden rounded-lg bg-white p-6 text-left align-middle shadow-xl transition-all ${sizes[size]}`}
              >
                {title && (
                  <Dialog.Title
                    as="h3"
                    className="relative text-lg font-medium leading-6 text-gray-900 mb-4"
                  >
                    {title}
                    <button
                      type="button"
                      className="absolute right-0 top-0 text-gray-400 hover:text-gray-500"
                      onClick={onClose}
                    >
                      <X className="h-5 w-5" />
                      <span className="sr-only">Close</span>
                    </button>
                  </Dialog.Title>
                )}
                {children}
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}

================
File: src/components/ui/NavButton.tsx
================
'use client';

import { forwardRef } from "react";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";

interface NavButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "danger" | "outline";
  size?: "sm" | "md" | "lg";
  loading?: boolean;
  fullWidth?: boolean;
  className?: string;
  children?: React.ReactNode;
  href?: string;
  prefetch?: boolean;
}

const NavButton = forwardRef<HTMLButtonElement, NavButtonProps>(
  (
    { 
      children, 
      className = "", 
      variant = "primary", 
      size = "md", 
      loading = false, 
      fullWidth = false, 
      href,
      prefetch = true,
      ...props 
    },
    ref,
  ) => {
    const router = useRouter();

    // Handle navigation - simplified implementation
    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
      if (props.disabled || loading) {
        e.preventDefault();
        return;
      }

      if (href) {
        // For navigation, dispatch route change start event
        if (typeof window !== 'undefined') {
          window.dispatchEvent(new Event('routeChangeStart'));
        }
        
        // Navigate
        router.push(href);
      }

      if (props.onClick) {
        props.onClick(e);
      }
    };

    // Base classes
    const baseClasses = cn(
      "relative inline-flex items-center justify-center font-medium transition-all duration-200",
      "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2",
      "active:scale-95 transform rounded-full",
      { "w-full": fullWidth },
      { "opacity-70 cursor-not-allowed": props.disabled },
      { "cursor-wait": loading },
    );

    // Variant classes
    const variants = {
      primary:
        "bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800 focus-visible:ring-blue-500",
      secondary:
        "bg-gray-200 text-gray-900 hover:bg-gray-300 active:bg-gray-400 focus-visible:ring-gray-400",
      danger:
        "bg-red-600 text-white hover:bg-red-700 active:bg-red-800 focus-visible:ring-red-500",
      outline:
        "border-2 border-gray-300 bg-transparent text-gray-700 hover:bg-gray-50 focus-visible:ring-gray-400 hover:border-gray-400",
    };

    // Size classes
    const sizes = {
      sm: "h-9 px-4 text-xs",
      md: "h-11 px-6 text-sm",
      lg: "h-13 px-8 text-base",
    };

    return (
      <button
        ref={ref}
        className={cn(
          baseClasses,
          variants[variant],
          sizes[size],
          className,
        )}
        disabled={loading || props.disabled}
        onClick={handleClick}
        {...props}
      >
        {/* Loading spinner */}
        {loading && (
          <div className="absolute inset-0 flex items-center justify-center bg-inherit rounded-full">
            <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z" />
            </svg>
          </div>
        )}

        {/* Button content with conditional opacity when loading */}
        <span className={cn("flex items-center justify-center gap-2", { "opacity-0": loading })}>
          {children}
        </span>
      </button>
    );
  },
);

NavButton.displayName = "NavButton";

export default NavButton;

================
File: src/components/ui/NavLink.tsx
================
'use client';

import { ReactNode, forwardRef } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useLoading } from '@/components/LoadingProvider';

interface NavLinkProps {
  href: string;
  children: ReactNode;
  className?: string;
  prefetch?: boolean;
  disabled?: boolean;
  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;
}

const NavLink = forwardRef<HTMLAnchorElement, NavLinkProps>(
  ({ href, children, className = '', prefetch = true, onClick, ...props }, ref) => {
    const pathname = usePathname();
    const router = useRouter();
    const { startLoading } = useLoading();
    const isActive = pathname === href;
    
    // Handle external links
    const isExternal = href.startsWith('http') || href.startsWith('mailto:') || href.startsWith('tel:');

    const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
      // If link is disabled, don't proceed
      if (props.disabled) {
        e.preventDefault();
        return;
      }

      // For internal links that aren't the current page, show loading state
      if (!isExternal && href !== pathname) {
        // Dispatch custom event for loading indicator
        if (typeof window !== 'undefined') {
          window.dispatchEvent(new Event('routeChangeStart'));
          startLoading(); // Also use the LoadingProvider directly
        }
      }

      // Call the original onClick if provided
      if (onClick) {
        onClick(e);
      }
    };

    // For external links, use regular anchor tag
    if (isExternal) {
      return (
        <a 
          ref={ref}
          href={href}
          className={`${className} ${isActive ? 'active' : ''}`}
          onClick={handleClick}
          target="_blank"
          rel="noopener noreferrer"
          {...props}
        >
          {children}
        </a>
      );
    }

    // For internal links, use Next.js Link
    return (
      <Link
        ref={ref}
        href={href}
        className={`${className} ${isActive ? 'active' : ''}`}
        onClick={handleClick}
        prefetch={prefetch}
        {...props}
      >
        {children}
      </Link>
    );
  }
);

NavLink.displayName = 'NavLink';

export default NavLink;

================
File: src/components/ui/Select.tsx
================
import { forwardRef } from 'react';

interface Option {
  value: string;
  label: string;
}

interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {
  label?: string;
  error?: string;
  options: Option[];
}

const Select = forwardRef<HTMLSelectElement, SelectProps>(({
  label,
  error,
  options,
  className = '',
  ...props
}, ref) => {
  return (
    <div className="space-y-1">
      {label && (
        <label htmlFor={props.id} className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}
      <select
        ref={ref}
        className={`block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm ${error ? 'border-red-500' : ''} ${className}`}
        {...props}
      >
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {error && (
        <p className="text-xs text-red-600">{error}</p>
      )}
    </div>
  );
});

Select.displayName = 'Select';

export default Select;

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/Spinner.tsx
================
interface SpinnerProps {
    size?: 'sm' | 'md' | 'lg';
    className?: string;
  }
  
  export default function Spinner({ size = 'md', className = '' }: SpinnerProps) {
    const sizes = {
      sm: 'h-4 w-4',
      md: 'h-8 w-8',
      lg: 'h-12 w-12',
    };
  
    return (
      <div className={`${className}`}>
        <svg
          className={`animate-spin text-blue-500 ${sizes[size]}`}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          ></circle>
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
          ></path>
        </svg>
      </div>
    );
  }

================
File: src/components/BookFormWrapper.tsx
================
// src/components/BookFormWrapper.tsx
'use client';

import dynamic from 'next/dynamic';
import { Suspense } from 'react';

// Dynamically import PremiumBookForm with SSR disabled.
const PremiumBookForm = dynamic(() => import('@/app/dashboard/owner/books/new/AddBook'), {
  ssr: false,
});

interface BookFormWrapperProps {
  genres: string[];
  user: any;  // Replace `any` with your specific type if desired.
}

export default function BookFormWrapper({ genres, user }: BookFormWrapperProps) {
  return (
    <Suspense fallback={<div className="p-8 text-center">Loading book form...</div>}>
      <PremiumBookForm genres={genres} user={user} />
    </Suspense>
  );
}

================
File: src/components/EnhancedLoader.tsx
================
"use client";
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { BookOpen, Bookmark, CheckCircle } from 'lucide-react';

// This component can be imported in your layout.tsx file
const EnhancedLoader = () => {
  const [loadingStage, setLoadingStage] = useState(0);
  const [loadingPercent, setLoadingPercent] = useState(0);
  
  // Loading stages for better UX feedback
  const loadingStages = [
    "Connecting to BookShare",
    "Loading your books",
    "Preparing your dashboard",
    "Almost there"
  ];
  
  // Quotes about books to display while loading
  const bookQuotes = [
    "A reader lives a thousand lives before they die. The person who never reads lives only one.",
    "Books are a uniquely portable magic.",
    "Reading is to the mind what exercise is to the body.",
    "There is no friend as loyal as a book."
  ];
  
  useEffect(() => {
    // Simulate loading progress
    const timer = setInterval(() => {
      setLoadingPercent(prev => {
        const newPercent = Math.min(prev + Math.random() * 5, 100);
        
        // Update loading stage based on progress
        if (newPercent > 90) setLoadingStage(3);
        else if (newPercent > 65) setLoadingStage(2);
        else if (newPercent > 30) setLoadingStage(1);
        
        return newPercent;
      });
    }, 200);
    
    return () => clearInterval(timer);
  }, []);
  
  return (
    <div className="fixed inset-0 flex flex-col items-center justify-center bg-white bg-opacity-95 z-50">
      <div className="w-full max-w-md px-8 py-8 flex flex-col items-center">
        {/* Logo animation */}
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.6, ease: [0.22, 1, 0.36, 1] }}
          className="mb-8"
        >
          <div className="relative w-24 h-24 flex items-center justify-center">
            <motion.div 
              className="absolute inset-0 rounded-lg bg-gradient-to-br from-blue-500 to-indigo-600"
              animate={{ 
                rotate: [0, 360],
                scale: [1, 1.05, 1]
              }}
              transition={{ 
                duration: 3, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
            />
            
            <motion.div
              animate={{ 
                y: [0, -5, 0], 
                rotate: [0, 5, 0, -5, 0]
              }}
              transition={{ 
                duration: 2.5, 
                repeat: Infinity,
                ease: "easeInOut" 
              }}
              className="relative z-10 text-white"
            >
              <BookOpen size={48} className="drop-shadow-md" />
            </motion.div>
          </div>
        </motion.div>
        
        {/* App name */}
        <motion.h1 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3, duration: 0.6 }}
          className="text-3xl font-bold text-center text-gray-900 mb-2"
        >
          BookShare
        </motion.h1>
        
        {/* Loading stage text */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="h-8 mt-1 mb-6"
        >
          <AnimatePresence mode="wait">
            <motion.p
              key={loadingStage}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.3 }}
              className="text-blue-600 font-medium"
            >
              {loadingStages[loadingStage]}
            </motion.p>
          </AnimatePresence>
        </motion.div>
        
        {/* Progress bar */}
        <div className="w-full bg-gray-100 rounded-full h-3 mb-8 overflow-hidden">
          <motion.div 
            className="h-full bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full"
            initial={{ width: "0%" }}
            animate={{ width: `${loadingPercent}%` }}
            transition={{ ease: "easeOut" }}
          />
        </div>
        
        {/* Book quotes */}
        <div className="w-full bg-blue-50 rounded-lg p-4 border border-blue-100 mt-2 h-24 flex items-center justify-center">
          <AnimatePresence mode="wait">
            <motion.div
              key={loadingStage}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
              className="flex items-start"
            >
              <Bookmark className="text-blue-500 mt-1 mr-3 flex-shrink-0" />
              <p className="text-blue-700 text-sm italic">"{bookQuotes[loadingStage]}"</p>
            </motion.div>
          </AnimatePresence>
        </div>
        
        {/* Loading animation - floating books */}
        <div className="relative h-20 w-full mt-8">
          {[...Array(5)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute"
              style={{
                left: `${15 + i * 18}%`,
                top: '50%',
                translateY: '-50%'
              }}
              animate={{
                y: [0, -15, 0],
                rotate: [0, i % 2 === 0 ? 5 : -5, 0],
                scale: [1, 1.05, 1]
              }}
              transition={{
                duration: 2,
                delay: i * 0.2,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              <div className={`w-10 h-14 rounded-md flex items-center justify-center shadow-md 
                ${i % 4 === 0 ? 'bg-blue-500' : 
                  i % 4 === 1 ? 'bg-indigo-500' : 
                  i % 4 === 2 ? 'bg-purple-500' : 'bg-sky-500'} 
                text-white font-bold text-xs`}
              >
                BOOK
              </div>
            </motion.div>
          ))}
        </div>
        
        {/* Status updates */}
        <div className="flex flex-col items-center mt-4">
          <div className="flex items-center text-xs text-gray-500 space-x-2">
            <motion.div
              animate={{
                opacity: [0.5, 1, 0.5],
                scale: [0.95, 1, 0.95]
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              <CheckCircle size={16} className={loadingPercent > 30 ? "text-green-500" : "text-gray-300"} />
            </motion.div>
            <span className={loadingPercent > 30 ? "text-green-600" : "text-gray-400"}>Resources loaded</span>
            
            <span className="mx-1">•</span>
            
            <motion.div
              animate={{
                opacity: loadingPercent > 60 ? [0.5, 1, 0.5] : 1,
                scale: loadingPercent > 60 ? [0.95, 1, 0.95] : 1
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              <CheckCircle size={16} className={loadingPercent > 60 ? "text-green-500" : "text-gray-300"} />
            </motion.div>
            <span className={loadingPercent > 60 ? "text-green-600" : "text-gray-400"}>Components ready</span>
            
            <span className="mx-1">•</span>
            
            <motion.div
              animate={{
                opacity: loadingPercent > 90 ? [0.5, 1, 0.5] : 1,
                scale: loadingPercent > 90 ? [0.95, 1, 0.95] : 1
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              <CheckCircle size={16} className={loadingPercent > 90 ? "text-green-500" : "text-gray-300"} />
            </motion.div>
            <span className={loadingPercent > 90 ? "text-green-600" : "text-gray-400"}>Finalizing</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnhancedLoader;

================
File: src/components/LoadingProvider.tsx
================
'use client';

import { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';

type LoadingContextType = {
  isLoading: boolean;
  setIsLoading: (loading: boolean) => void;
  startLoading: () => void;
  stopLoading: () => void;
};

const LoadingContext = createContext<LoadingContextType>({
  isLoading: false,
  setIsLoading: () => {},
  startLoading: () => {},
  stopLoading: () => {},
});

export const useLoading = () => useContext(LoadingContext);

export function LoadingProvider({ children }: { children: ReactNode }) {
  const [isLoading, setIsLoading] = useState(false);
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const loadingTimerRef = useRef<NodeJS.Timeout | null>(null);
  
  // Maximum loading time to prevent infinite loading states
  const maxLoadingTimeMs = 5000;

  const startLoading = () => {
    // Clear any existing loading timers
    if (loadingTimerRef.current) {
      clearTimeout(loadingTimerRef.current);
    }
    
    setIsLoading(true);
    
    // Set a maximum loading time as a fallback
    loadingTimerRef.current = setTimeout(() => {
      stopLoading();
    }, maxLoadingTimeMs);

    // Dispatch event for other components to react
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('loadingStarted'));
    }
  };

  const stopLoading = () => {
    // Clear any existing loading timers
    if (loadingTimerRef.current) {
      clearTimeout(loadingTimerRef.current);
      loadingTimerRef.current = null;
    }
    
    setIsLoading(false);
    
    // Dispatch event for other components to react
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('loadingStopped'));
    }
  };

  // Handle route changes - clean up when component unmounts
  useEffect(() => {
    return () => {
      if (loadingTimerRef.current) {
        clearTimeout(loadingTimerRef.current);
      }
    };
  }, []);

  // When route changes, stop any active loading states
  useEffect(() => {
    stopLoading();
  }, [pathname, searchParams]);
  
  // Listen for global navigation events
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const handleRouteChangeStart = () => startLoading();
    const handleRouteChangeComplete = () => stopLoading();
    
    window.addEventListener('routeChangeStart', handleRouteChangeStart);
    window.addEventListener('routeChangeComplete', handleRouteChangeComplete);
    
    return () => {
      window.removeEventListener('routeChangeStart', handleRouteChangeStart);
      window.removeEventListener('routeChangeComplete', handleRouteChangeComplete);
    };
  }, []);

  return (
    <LoadingContext.Provider value={{ isLoading, setIsLoading, startLoading, stopLoading }}>
      <div className="relative">
        <AnimatePresence>
          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.1 }}
              className="fixed top-0 left-0 right-0 z-50 h-1 bg-blue-600 overflow-hidden"
            >
              <motion.div 
                className="h-full bg-blue-400"
                initial={{ width: "0%" }}
                animate={{
                  width: ["0%", "30%", "60%", "80%"],
                }}
                transition={{
                  duration: 1.5,
                  ease: "easeInOut",
                  repeat: Infinity,
                  repeatType: "loop"
                }}
              />
            </motion.div>
          )}
        </AnimatePresence>
        {children}
      </div>
    </LoadingContext.Provider>
  );
}

================
File: src/components/RoleSelectionWrapper.tsx
================
'use client';

import dynamic from 'next/dynamic';

// Dynamically import the RoleSelection component, only on the client-side
const RoleSelectionClient = dynamic(
  () => import('@/components/onboarding/RoleSelection'),
  { ssr: false }
);

// Export a wrapper component that renders the dynamic component
export default function RoleSelectionWrapper() {
  return <RoleSelectionClient />;
}

================
File: src/components/RouteChangeListener.tsx
================
'use client';

import { useEffect } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import { useLoading } from '@/components/LoadingProvider';

export function RouteChangeListener() {
    const { startLoading, stopLoading } = useLoading();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    // Track previous path to detect actual navigation
    useEffect(() => {
        let prevPathname = pathname;
        let prevSearchParams = searchParams;

        // Listen for Next.js navigation - this happens at component mount time
        const handlePathChange = () => {
            if (prevPathname !== pathname || prevSearchParams !== searchParams) {
                // This is a route change, update references
                prevPathname = pathname;
                prevSearchParams = searchParams;
                
                // Stop any active loading
                stopLoading();
            }
        };

        // Execute on pathname or searchParams change
        handlePathChange();

        // Route change handler for manual navigation events
        const handleRouteChangeStart = () => {
            startLoading();
            const startEvent = new CustomEvent('navStart');
            window.dispatchEvent(startEvent);
        };

        const handleRouteChangeComplete = () => {
            stopLoading();
            const completeEvent = new CustomEvent('navComplete');
            window.dispatchEvent(completeEvent);
        };

        // Add event listeners for custom events
        window.addEventListener('routeChangeStart', handleRouteChangeStart);
        window.addEventListener('routeChangeComplete', handleRouteChangeComplete);

        return () => {
            window.removeEventListener('routeChangeStart', handleRouteChangeStart);
            window.removeEventListener('routeChangeComplete', handleRouteChangeComplete);
        };
    }, [pathname, searchParams, startLoading, stopLoading]);

    return null; // This is a non-visual component
}

================
File: src/components/SearchParamsComponent.tsx
================
// src/components/SearchParamsComponent.tsx
'use client';

import { useSearchParams } from 'next/navigation';

export default function SearchParamsComponent() {
  const searchParams = useSearchParams();
  const query = searchParams?.get('from') || '';
  
  return (
    <p className="text-sm text-gray-500 mt-1">
      {query ? `You were redirected from: ${query}` : ''}
    </p>
  );
}

================
File: src/lib/prisma.ts
================
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;

export default prisma;

================
File: src/lib/redis.ts
================
// src/lib/redis.ts
import { createClient } from 'redis';

// Simple in-memory cache as complete fallback
const memoryCache = new Map<string, { data: any; expiry: number }>();
const CACHE_SIZE_LIMIT = 100;

// Set Redis as disabled by default, only enable if connection succeeds
let isRedisEnabled = false;
let client: any = null;

// Try to create Redis client if URL is provided
try {
  const redisUrl = process.env.REDIS_URL;
  
  if (redisUrl) {
    console.log('Redis URL found, attempting connection');
    
    // Ensure URL has proper protocol
    const formattedRedisUrl = !redisUrl.startsWith('redis://') && !redisUrl.startsWith('rediss://') 
      ? `redis://${redisUrl}` 
      : redisUrl;
    
    client = createClient({ 
      url: formattedRedisUrl,
      socket: {
        connectTimeout: 3000, // 3 second timeout
        reconnectStrategy: false // Disable auto-reconnect
      }
    });
    
    // Don't block app startup on Redis connection
    if (process.env.NODE_ENV !== 'test') {
      client.connect()
        .then(() => {
          console.log('Redis connected successfully');
          isRedisEnabled = true;
        })
        .catch((err: Error) => {
          console.warn('Redis connection failed, using memory cache only:', err.message);
          isRedisEnabled = false;
        });
    }
  } else {
    console.log('No Redis URL found, using memory cache only');
  }
} catch (error) {
  console.warn('Error setting up Redis client, using memory cache only:', 
    error instanceof Error ? error.message : String(error));
}

// Helper function to get from memory cache
function getFromMemoryCache(key: string) {
  const item = memoryCache.get(key);
  if (!item) return null;
  
  if (Date.now() > item.expiry) {
    memoryCache.delete(key);
    return null;
  }
  
  return item.data;
}

// Helper function to set to memory cache
function setToMemoryCache(key: string, data: any, expireInSeconds: number) {
  // Clean up cache if it's too large
  if (memoryCache.size >= CACHE_SIZE_LIMIT) {
    const oldestKey = memoryCache.keys().next().value;
    if (oldestKey !== undefined) {
      memoryCache.delete(oldestKey);
    }
  }
  
  memoryCache.set(key, { 
    data, 
    expiry: Date.now() + (expireInSeconds * 1000)
  });
}

export async function getCache<T>(key: string): Promise<T | null> {
  // Try Redis first if enabled
  if (isRedisEnabled && client && client.isOpen) {
    try {
      const data = await client.get(key);
      if (data) {
        return JSON.parse(data);
      }
    } catch (error) {
      // Silent fallback to memory cache
    }
  }
  
  // Fallback to memory cache
  return getFromMemoryCache(key);
}

export async function setCache(key: string, data: any, expireInSeconds = 60): Promise<void> {
  // Try Redis first if enabled
  if (isRedisEnabled && client && client.isOpen) {
    try {
      await client.set(key, JSON.stringify(data), { EX: expireInSeconds });
    } catch (error) {
      // Silent fallback to memory cache
    }
  }
  
  // Always set in memory cache as backup
  setToMemoryCache(key, data, expireInSeconds);
}

export async function deleteCache(key: string): Promise<void> {
  // Try Redis first if enabled
  if (isRedisEnabled && client && client.isOpen) {
    try {
      await client.del(key);
    } catch (error) {
      // Silent continue
    }
  }
  
  // Always delete from memory cache
  memoryCache.delete(key);
}

// Exporting a dummy client object if Redis isn't available
export default {
  isOpen: isRedisEnabled && client?.isOpen,
  connect: async () => {
    if (client) return client.connect();
    return Promise.resolve();
  },
  get: async (key: string) => {
    if (isRedisEnabled && client && client.isOpen) 
      return client.get(key);
    return null;
  },
  set: async (key: string, value: string, options?: any) => {
    if (isRedisEnabled && client && client.isOpen) 
      return client.set(key, value, options);
    return null;
  },
  del: async (key: string) => {
    if (isRedisEnabled && client && client.isOpen) 
      return client.del(key);
    return null;
  }
};

================
File: src/lib/utils.ts
================
// src/lib/utils.ts
import { ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatDate(date: string | Date): string {
  const d = new Date(date);
  return d.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  });
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return `${text.slice(0, maxLength)}...`;
}

export const bookConditions = [
  { value: 'new', label: 'New' },
  { value: 'like-new', label: 'Like New' },
  { value: 'good', label: 'Good' },
  { value: 'fair', label: 'Fair' },
  { value: 'poor', label: 'Poor' },
];

export const bookStatuses = [
  { value: 'available', label: 'Available' },
  { value: 'rented', label: 'Rented' },
  { value: 'exchanged', label: 'Exchanged' },
];

// Common book genres for filtering
export const bookGenres = [
  'Fiction',
  'Non-Fiction',
  'Science Fiction',
  'Fantasy',
  'Mystery',
  'Thriller',
  'Romance',
  'Biography',
  'History',
  'Self-Help',
  'Business',
  'Science',
  'Technology',
  'Art',
  'Poetry',
  'Travel',
  'Cooking',
  'Children',
  'Young Adult',
  'Comics',
  'Religion',
  'Philosophy',
];

// Generate random color from a string (consistent for same input)
export function stringToColor(str: string) {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
  }
  
  const hue = hash % 360;
  return `hsl(${hue}, 65%, 95%)`;
}

// Format phone number for display
export function formatPhoneNumber(phoneNumber: string): string {
  // Remove all non-numeric characters
  const cleaned = phoneNumber.replace(/\D/g, '');
  
  // Check if the number has a valid length
  if (cleaned.length < 10) return phoneNumber;
  
  // Format as (XXX) XXX-XXXX for US numbers
  if (cleaned.length === 10) {
    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;
  }
  
  // Format as +X XXX XXX XXXX for international numbers
  return `+${cleaned.slice(0, 1)} ${cleaned.slice(1, 4)} ${cleaned.slice(4, 7)} ${cleaned.slice(7)}`;
}

// Format email addresses to partially hide them for privacy
export function formatEmailForPrivacy(email: string): string {
  const [username, domain] = email.split('@');
  
  // Show only first and last character of username, hide the rest with *
  const hiddenUsername = username.length > 2
    ? `${username[0]}${'*'.repeat(username.length - 2)}${username[username.length - 1]}`
    : username;
  
  return `${hiddenUsername}@${domain}`;
}

// Get time elapsed since a date (e.g., "2 days ago")
export function timeAgo(date: Date | string): string {
  const now = new Date();
  const past = new Date(date);
  const seconds = Math.floor((now.getTime() - past.getTime()) / 1000);
  
  // Less than a minute
  if (seconds < 60) {
    return 'just now';
  }
  
  // Less than an hour
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) {
    return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;
  }
  
  // Less than a day
  const hours = Math.floor(minutes / 60);
  if (hours < 24) {
    return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;
  }
  
  // Less than a month
  const days = Math.floor(hours / 24);
  if (days < 30) {
    return `${days} ${days === 1 ? 'day' : 'days'} ago`;
  }
  
  // Less than a year
  const months = Math.floor(days / 30);
  if (months < 12) {
    return `${months} ${months === 1 ? 'month' : 'months'} ago`;
  }
  
  // More than a year
  const years = Math.floor(months / 12);
  return `${years} ${years === 1 ? 'year' : 'years'} ago`;
}

// Generate random avatars by name
export function getAvatarUrl(name: string, size = 200) {
  // For a real app, you'd use a service like UI Avatars or Dicebear
  return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&size=${size}&background=random`;
}

// Format book details for metadata
export function getBookMetadata(book: any) {
  return {
    title: `${book.title} by ${book.author} | BookShare`,
    description: book.description || `${book.title} by ${book.author}. Available for ${book.status === 'available' ? 'rent or exchange' : book.status} in ${book.location}.`,
    openGraph: {
      title: `${book.title} by ${book.author}`,
      description: truncateText(book.description || `Available for ${book.status === 'available' ? 'rent or exchange' : book.status} in ${book.location}.`, 160),
      images: [{ url: book.coverImage || `/api/placeholder/300/450?text=${encodeURIComponent(book.title)}` }],
    },
  };
}

// Convert a date to a relative time string (e.g., 'today', 'yesterday', 'last week')
export function relativeTime(date: Date | string): string {
  const now = new Date();
  const past = new Date(date);
  
  // Set to midnight for day comparisons
  const nowDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const pastDay = new Date(past.getFullYear(), past.getMonth(), past.getDate());
  
  // Calculate difference in days
  const diffTime = nowDay.getTime() - pastDay.getTime();
  const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return 'today';
  if (diffDays === 1) return 'yesterday';
  if (diffDays > 1 && diffDays <= 7) return `${diffDays} days ago`;
  if (diffDays > 7 && diffDays <= 14) return 'last week';
  if (diffDays > 14 && diffDays <= 30) return `${Math.round(diffDays / 7)} weeks ago`;
  if (diffDays > 30 && diffDays <= 365) return `${Math.round(diffDays / 30)} months ago`;
  
  return `${Math.round(diffDays / 365)} years ago`;
}

// Generate initials from a name (e.g., "John Doe" -> "JD")
export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(part => part[0])
    .join('')
    .toUpperCase()
    .slice(0, 2);
}

// Format large numbers with commas (e.g., 1000 -> "1,000")
export function formatNumber(num: number): string {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

// Check if a value is empty (null, undefined, empty string, empty array, or empty object)
export function isEmpty(value: any): boolean {
  if (value === null || value === undefined) return true;
  if (typeof value === 'string') return value.trim() === '';
  if (Array.isArray(value)) return value.length === 0;
  if (typeof value === 'object') return Object.keys(value).length === 0;
  return false;
}

// Generate a random ID (useful for temporary keys)
export function generateId(length = 8): string {
  return Math.random()
    .toString(36)
    .substring(2, length + 2);
}

// Check if a string is a valid email
export function isValidEmail(email: string): boolean {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(email);
}

// Check if a string is a valid phone number (simple version)
export function isValidPhone(phone: string): boolean {
  const regex = /^\+?[0-9]{10,15}$/;
  return regex.test(phone.replace(/\D/g, ''));
}

// Debounce function to limit how often a function can be called
export function debounce<F extends (...args: any[]) => any>(func: F, wait: number): (...args: Parameters<F>) => void {
  let timeout: ReturnType<typeof setTimeout> | null = null;
  
  return function(...args: Parameters<F>) {
    if (timeout !== null) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => func(...args), wait);
  };
}

// Throttle function to limit the rate at which a function is executed
export function throttle<F extends (...args: any[]) => any>(func: F, limit: number): (...args: Parameters<F>) => void {
  let inThrottle = false;
  
  return function(...args: Parameters<F>) {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => {
        inThrottle = false;
      }, limit);
    }
  };
}

================
File: src/types/index.ts
================
import { Book, User } from '@prisma/client';

export type BookWithOwner = Book & {
  owner: Pick<User, 'id' | 'name' | 'email' | 'mobileNumber'>;
};

export type UserRole = 'owner' | 'seeker';

export type BookStatus = 'available' | 'rented' | 'exchanged';

export type BookCondition = 'new' | 'like-new' | 'good' | 'fair' | 'poor';

export type BookFormData = {
  title: string;
  author: string;
  genre?: string;
  description?: string;
  location: string;
  contactInfo: string;
  condition?: BookCondition;
  coverImage?: string;
};

================
File: src/middleware.ts
================
// src/middleware.ts
import { NextResponse } from 'next/server';
import { clerkMiddleware, createRouteMatcher, createClerkClient } from '@clerk/nextjs/server';

// Define public routes that don't require authentication
const publicRoutes = [
  '/',
  '/books',
  '/books/(.*)',
  '/api/webhook/clerk',
  '/sign-in',
  '/sign-up',
  // Include static files and other public resources
  '/favicon.ico',
  '/api/placeholder/(.*)'
];

// Create a matcher for the public routes
const isPublic = createRouteMatcher(publicRoutes);

export default clerkMiddleware(async (auth, req) => {
  // Skip authentication for public routes
  if (isPublic(req)) {
    return NextResponse.next();
  }
  
  // For protected routes, check if the user is authenticated
  const { userId } = await auth();
  
  // Initialize response
  let response = NextResponse.next();
  
  // Important performance optimization: use headers to store auth state
  // This prevents redundant Clerk API calls
  if (userId) {
    response.headers.set('x-user-authenticated', 'true');
    response.headers.set('x-user-id', userId);
  }
  
  return response;
});

export const config = {
  matcher: ['/((?!.*\\..*|_next).*)', '/', '/(api|trpc)(.*)'],
};

================
File: .eslintignore
================
**/*.ts
**/*.tsx
**/*.js
**/*.jsx

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    domains: [
      'img.clerk.com',
      'images.unsplash.com',
      'ui-avatars.com', 
      'localhost'
    ],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "book-exchange-portal",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.14.3",
    "@headlessui/react": "^2.2.1",
    "@prisma/client": "^6.6.0",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-slot": "^1.2.0",
    "avatar": "^0.1.0",
    "badge": "^1.0.3",
    "button": "^1.1.1",
    "card": "^2.5.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.6.5",
    "lucide-react": "^0.487.0",
    "mongodb": "^6.15.0",
    "next": "15.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.55.0",
    "react-hot-toast": "^2.5.2",
    "recharts": "^2.15.2",
    "redis": "^4.7.0",
    "repomix": "^0.3.1",
    "shadcn": "^2.4.0",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@clerk/types": "^4.53.0",
    "@eslint/eslintrc": "^3",
    "@types/node": "^20.17.30",
    "@types/react": "^19.1.1",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.14",
    "eslint": "^9",
    "eslint-config-next": "15.3.0",
    "postcss": "^8.4.31",
    "prisma": "^6.6.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: [
      "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    ],
    theme: {
    	extend: {
    		backgroundImage: {
    			'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
    			'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))'
    		},
    		animation: {
    			'blob': 'blob 7s infinite'
    		},
    		keyframes: {
    			'blob': {
    				'0%': {
    					transform: 'translate(0px, 0px) scale(1)'
    				},
    				'33%': {
    					transform: 'translate(30px, -50px) scale(1.1)'
    				},
    				'66%': {
    					transform: 'translate(-20px, 20px) scale(0.9)'
    				},
    				'100%': {
    					transform: 'translate(0px, 0px) scale(1)'
    				}
    			}
    		},
    		borderRadius: {
    			lg: 'var(--radius)',
    			md: 'calc(var(--radius) - 2px)',
    			sm: 'calc(var(--radius) - 4px)'
    		},
    		colors: {
    			background: 'hsl(var(--background))',
    			foreground: 'hsl(var(--foreground))',
    			card: {
    				DEFAULT: 'hsl(var(--card))',
    				foreground: 'hsl(var(--card-foreground))'
    			},
    			popover: {
    				DEFAULT: 'hsl(var(--popover))',
    				foreground: 'hsl(var(--popover-foreground))'
    			},
    			primary: {
    				DEFAULT: 'hsl(var(--primary))',
    				foreground: 'hsl(var(--primary-foreground))'
    			},
    			secondary: {
    				DEFAULT: 'hsl(var(--secondary))',
    				foreground: 'hsl(var(--secondary-foreground))'
    			},
    			muted: {
    				DEFAULT: 'hsl(var(--muted))',
    				foreground: 'hsl(var(--muted-foreground))'
    			},
    			accent: {
    				DEFAULT: 'hsl(var(--accent))',
    				foreground: 'hsl(var(--accent-foreground))'
    			},
    			destructive: {
    				DEFAULT: 'hsl(var(--destructive))',
    				foreground: 'hsl(var(--destructive-foreground))'
    			},
    			border: 'hsl(var(--border))',
    			input: 'hsl(var(--input))',
    			ring: 'hsl(var(--ring))',
    			chart: {
    				'1': 'hsl(var(--chart-1))',
    				'2': 'hsl(var(--chart-2))',
    				'3': 'hsl(var(--chart-3))',
    				'4': 'hsl(var(--chart-4))',
    				'5': 'hsl(var(--chart-5))'
    			}
    		}
    	}
    },
    plugins: [require("tailwindcss-animate")],
  }

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "tailwind.config.js"],
  "exclude": ["node_modules"]
}
